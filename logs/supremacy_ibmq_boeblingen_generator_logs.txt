----------------------------------------------------------------------------------------------------
Case (2, 3)
Generating 1x3, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
Infeasible
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 2
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 1.00, O qubits = 0.00, d = 2.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.25658392906188965
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
Evaluator input has 1 cases: dict_keys([(2, 3)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 4)
Generating 2x2, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.0165708065032959
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
Evaluator input has 2 cases: dict_keys([(2, 3), (3, 4)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 5)
Generating 1x5, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.018656015396118164
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
Evaluator input has 3 cases: dict_keys([(2, 3), (3, 4), (3, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 6)
Generating 2x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (3, 6) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 5)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289154
manually calculated objective value: 8.999999999999979
runtime: 0.02489495277404785
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
Evaluator input has 4 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 2.00, d = 4.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 2.00, O qubits = 0.00, d = 4.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.07035112380981445
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
Evaluator input has 5 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 7)
Generating 1x7, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.02743077278137207
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
Evaluator input has 6 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 8)
Generating 2x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 4
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 2.00, rho qubits = 2.00, O qubits = 1.00, d = 4.00, K = 3.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.19594597816467285
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
Evaluator input has 7 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 9)
Generating 3x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (4, 9) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.08929109573364258
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
Evaluator input has 8 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
objective value: 9.03006560328916
manually calculated objective value: 9.0
runtime: 0.03085803985595703
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
Evaluator input has 9 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 8)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 3.00, rho qubits = 2.00, O qubits = 1.00, d = 5.00, K = 3.00
cluster 2: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.20079803466796875
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
Evaluator input has 10 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 9)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 2.00, O qubits = 1.00, d = 5.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 3.00, d = 5.00, K = 4.00
cluster 2: original input = 2.00, rho qubits = 2.00, O qubits = 1.00, d = 4.00, K = 3.00
objective value: 378.653499176593
manually calculated objective value: 377.99999999999994
runtime: 0.30086803436279297
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
Evaluator input has 11 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 10)
Generating 2x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 2.00, d = 4.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 2.00, O qubits = 2.00, d = 5.00, K = 4.00
cluster 2: original input = 3.00, rho qubits = 2.00, O qubits = 0.00, d = 5.00, K = 2.00
objective value: 370.1588825849221
manually calculated objective value: 369.0
runtime: 0.39794111251831055
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
Evaluator input has 12 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 12)
Generating 3x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (5, 12) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0466618537902832
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
Evaluator input has 13 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.1533970832824707
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
Evaluator input has 14 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
3 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 2.00, d = 6.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 1.00, d = 6.00, K = 3.00
objective value: 162.0989827463447
manually calculated objective value: 162.0
runtime: 0.12424302101135254
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
Evaluator input has 15 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.06609082221984863
OPTIMAL
********************
saturated fc shots = 9216, needs 1 jobs
Evaluator input has 16 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 2: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
objective value: 975.0098839425
manually calculated objective value: 972.0000000000006
runtime: 0.7256069183349609
OPTIMAL
********************
saturated fc shots = 23552, needs 1 jobs
Evaluator input has 17 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 14)
Generating 2x7, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 361.1268451500688
manually calculated objective value: 360.0
runtime: 0.527979850769043
OPTIMAL
********************
current diff: 0.24100139485384175 current shots: 50176
saturated fc shots = 92160, needs 1 jobs
Evaluator input has 18 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12353562477174
manually calculated objective value: 35.999984780367726
runtime: 0.23271489143371582
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
Evaluator input has 19 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
3 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 2.00, d = 5.00, K = 3.00
cluster 1: original input = 5.00, rho qubits = 2.00, O qubits = 1.00, d = 7.00, K = 3.00
objective value: 162.0989827463447
manually calculated objective value: 162.0
runtime: 0.22040796279907227
OPTIMAL
********************
saturated fc shots = 5120, needs 1 jobs
Evaluator input has 20 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.20029187202453613
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
Evaluator input has 21 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 4.00, rho qubits = 3.00, O qubits = 1.00, d = 7.00, K = 4.00
cluster 1: original input = 7.00, rho qubits = 0.00, O qubits = 4.00, d = 7.00, K = 4.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = 0.00, d = 3.00, K = 2.00
objective value: 767.3489573469615
manually calculated objective value: 765.0
runtime: 0.773827075958252
OPTIMAL
********************
saturated fc shots = 25600, needs 1 jobs
Evaluator input has 22 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 14)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 2.00, O qubits = 1.00, d = 7.00, K = 3.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.5605199337005615
OPTIMAL
********************
current diff: 0.24106793708947274 current shots: 50176
saturated fc shots = 90112, needs 1 jobs
Evaluator input has 23 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 16)
Generating 4x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (7, 16) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 18)
Generating 3x6, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (7, 18) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 6.00, rho qubits = 2.00, O qubits = -0.00, d = 8.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = -0.00, O qubits = 2.00, d = 3.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.22133588790893555
OPTIMAL
********************
saturated fc shots = 5120, needs 1 jobs
Evaluator input has 24 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.2048790454864502
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
Evaluator input has 25 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 2.00, d = 5.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 3.00, O qubits = 1.00, d = 8.00, K = 4.00
objective value: 758.0193921129979
manually calculated objective value: 756.0
runtime: 0.739434003829956
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
Evaluator input has 26 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 2.00, d = 8.00, K = 2.00
cluster 1: original input = 6.00, rho qubits = 2.00, O qubits = 0.00, d = 8.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.12947392463684082
OPTIMAL
********************
current diff: 0.2344728247650412 current shots: 50176
saturated fc shots = 90112, needs 1 jobs
Evaluator input has 27 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
7 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 4.00, rho qubits = 3.00, O qubits = 1.00, d = 7.00, K = 4.00
cluster 1: original input = 6.00, rho qubits = 2.00, O qubits = 3.00, d = 8.00, K = 5.00
cluster 2: original input = 6.00, rho qubits = 2.00, O qubits = 3.00, d = 8.00, K = 5.00
objective value: 2600.926387534849
manually calculated objective value: 2592.0
runtime: 0.8781468868255615
OPTIMAL
********************
current diff: 0.8417462933595683 current shots: 50176
current diff: 0.43607290112173513 current shots: 101376
current diff: 0.2850293173719405 current shots: 152576
current diff: 0.20285259024959654 current shots: 203776
current diff: 0.15182583795659976 current shots: 254976
current diff: 0.12075185494597523 current shots: 306176
saturated fc shots = 354304, needs 1 jobs
Evaluator input has 28 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (8, 18) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 20)
Generating 4x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (8, 20) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12353478477772
manually calculated objective value: 35.99998392108484
runtime: 0.2895338535308838
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
Evaluator input has 29 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 8.00, rho qubits = 1.00, O qubits = 2.00, d = 9.00, K = 3.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = -0.00, d = 3.00, K = 2.00
objective value: 144.1816320059937
manually calculated objective value: 143.99999999999997
runtime: 0.6438901424407959
OPTIMAL
********************
saturated fc shots = 23552, needs 1 jobs
Evaluator input has 30 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.23856496810913086
OPTIMAL
********************
current diff: 0.24399170388822522 current shots: 50176
saturated fc shots = 92160, needs 1 jobs
Evaluator input has 31 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 2.00, O qubits = 2.00, d = 5.00, K = 4.00
cluster 1: original input = 5.00, rho qubits = 3.00, O qubits = 1.00, d = 8.00, K = 4.00
cluster 2: original input = 8.00, rho qubits = 1.00, O qubits = 3.00, d = 9.00, K = 4.00
objective value: 1137.478220444401
manually calculated objective value: 1133.9999999999993
runtime: 0.7791290283203125
OPTIMAL
********************
current diff: 0.850881820088084 current shots: 50176
current diff: 0.4348506690505475 current shots: 101376
current diff: 0.27954545171820866 current shots: 152576
current diff: 0.20158839221896702 current shots: 203776
current diff: 0.1538882520825698 current shots: 254976
current diff: 0.12087617117394187 current shots: 306176
saturated fc shots = 351232, needs 1 jobs
Evaluator input has 32 cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14), (9, 16)])Rank 0 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots
Calculating measurement filter, 20-qubit calibration circuits * 8 * 8.192e+03 shots. Rank 1 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots. Rank 6 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots. Rank 2 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots. Rank 3 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots. Rank 4 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots. Rank 9 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots. Rank 7 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots. Rank 5 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots. Rank 15 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots
Submitted 1 * 8192 = 8192 shots to hardware
Execute on hardware, 1.486e+02 seconds
----------------------------------------------------------------------------------------------------
Rank 16 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 23552 shots
Evaluating fc hardware, 23552 shots
Submitted 4 * 5888 = 23552 shots to hardware
Execute on hardware, 6.179e+02 seconds
----------------------------------------------------------------------------------------------------
Rank 11 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 90112 shots
Evaluating fc hardware, 90112 shots
Submitted 11 * 8192 = 90112 shots to hardware
Execute on hardware, 1.060e+03 seconds
Evaluating fc state vector
Evaluating fc qasm, 5120 shots
Evaluating fc hardware, 5120 shots
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots. Rank 13 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 90112 shots
Evaluating fc hardware, 90112 shots
Submitted 11 * 8192 = 90112 shots to hardware
Execute on hardware, 1.172e+03 seconds
----------------------------------------------------------------------------------------------------
Rank 17 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 92160 shots
Evaluating fc hardware, 92160 shots
Submitted 12 * 7680 = 92160 shots to hardware
Execute on hardware, 1.889e+03 seconds
----------------------------------------------------------------------------------------------------
Rank 14 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 354304 shots
Evaluating fc hardware, 354304 shots
Submitted 64 * 5536 = 354304 shots to hardware
Execute on hardware, 1.207e+04 seconds
----------------------------------------------------------------------------------------------------
Rank 18 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 351232 shots
Evaluating fc hardware, 351232 shots
Submitted 49 * 7168 = 351232 shots to hardware
Execute on hardware, 1.233e+04 seconds
----------------------------------------------------------------------------------------------------
8.143e+01 seconds
Submitted 1 * 1024 = 1024 shots to hardware
Mitigation for 3 qubit circuit
Mitigation for 3 qubit circuit took 1.461e-02 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
Rank 19 has 1 cases
Evaluating fc state vector
Evaluating fc qasm, 1176576 shots
Evaluating fc hardware, 1176576 shots
Submitted 192 * 6128 = 1176576 shots to hardware
Execute on hardware, 1.312e+04 seconds
----------------------------------------------------------------------------------------------------
Rank 10 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots
Submitted 1 * 8192 = 8192 shots to hardware
Execute on hardware, 2.142e+02 seconds
Evaluating fc state vector
Evaluating fc qasm, 25600 shots
Evaluating fc hardware, 25600 shots
Submitted 4 * 6400 = 25600 shots to hardware
Execute on hardware, 1.299e+04 seconds
----------------------------------------------------------------------------------------------------
Rank 12 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots
Submitted 1 * 8192 = 8192 shots to hardware
Execute on hardware, 2.806e+02 seconds
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots
Submitted 3 * 8192 = 24576 shots to hardware
Execute on hardware, 1.297e+04 seconds
----------------------------------------------------------------------------------------------------
4.760e+02 seconds
Submitted 1 * 1024 = 1024 shots to hardware
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.798e-02 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
Rank 8 has 2 cases
Evaluating fc state vector
Evaluating fc qasm, 23552 shots
Evaluating fc hardware, 23552 shots
Submitted 4 * 5888 = 23552 shots to hardware
Execute on hardware, 5.480e+02 seconds
Evaluating fc state vector
Evaluating fc qasm, 92160 shots
Evaluating fc hardware, 92160 shots
Submitted 12 * 7680 = 92160 shots to hardware
Execute on hardware, 1.279e+04 seconds
----------------------------------------------------------------------------------------------------
9.516e+02 seconds
Submitted 1 * 1024 = 1024 shots to hardware
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 9.658e-02 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
1.780e+03 seconds
Submitted 1 * 3072 = 3072 shots to hardware
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.487e-01 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
2.499e+03 seconds
Submitted 1 * 2048 = 2048 shots to hardware
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 8.921e-01 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
3.658e+03 seconds
Submitted 1 * 3072 = 3072 shots to hardware
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 3.261e+00 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
6.044e+03 seconds
Submitted 1 * 3072 = 3072 shots to hardware
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 3.224e+00 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
8.300e+03 seconds
Submitted 1 * 4096 = 4096 shots to hardware
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.306e+01 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
1.178e+04 seconds
Submitted 1 * 4096 = 4096 shots to hardware
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.316e+01 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
1.451e+04 seconds
Submitted 1 * 5120 = 5120 shots to hardware
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.466e+01 seconds
Traceback (most recent call last):
  File "generate_evaluator_input.py", line 187, in <module>
    fc_evaluations = evaluate_full_circ(circ=full_circ,total_shots=fc_shots,device_name=args.device_name,fields=['sv_noiseless','qasm','hw'])
  File "generate_evaluator_input.py", line 60, in evaluate_full_circ
    hw_fc = evaluate_circ(circ=circ,backend='hardware',evaluator_info=evaluator_info)
  File "/n/fs/weit-proj/circuit_cutting/mitigation/helper_fun.py", line 219, in evaluate_circ
    assert sum(list(hw_counts.values())) == evaluator_info['num_shots']
AssertionError
