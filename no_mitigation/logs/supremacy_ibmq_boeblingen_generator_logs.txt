-------------------------------------------------- Generator ibmq_boeblingen supremacy --------------------------------------------------
Existing cases: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (9, 10), (6, 12), (6, 14), (7, 12), (7, 14), (8, 12), (8, 14), (9, 12), (9, 14), (8, 16), (9, 16)])
(2, 3)
Case existed, skip
(2, 4)
----------------------------------------------------------------------------------------------------
Case (2, 4)
Generating 2x2, 1+8+1 supremacy circuit
Academic license - for non-commercial use only
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
Infeasible
Case (2, 4) not feasible
----------------------------------------------------------------------------------------------------
(2, 5)
----------------------------------------------------------------------------------------------------
Case (2, 5)
Generating 1x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
solving for 5 clusters
Infeasible
********************
MIQCP stats:
3 cuts, 4 clusters, max qubit = 2
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 1.00, O qubits = 1.00, d = 2.00, K = 2.00
cluster 2: original input = 1.00, rho qubits = 1.00, O qubits = 1.00, d = 2.00, K = 2.00
cluster 3: original input = 1.00, rho qubits = 1.00, O qubits = 0.00, d = 2.00, K = 1.00
objective value: 45.153616105858134
manually calculated objective value: 45.0
runtime: 0.0009551048278808594
OPTIMAL
********************
saturated fc shots = 1024
1 cases to run: dict_keys([(2, 5)])
----------------------------------------------------------------------------------------------------
(3, 4)
Case existed, skip
(3, 5)
Case existed, skip
(3, 6)
----------------------------------------------------------------------------------------------------
Case (3, 6)
Generating 2x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
solving for 5 clusters
********************
MIQCP stats:
5 cuts, 4 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = -0.00, O qubits = 2.00, d = 3.00, K = 2.00
cluster 1: original input = 1.00, rho qubits = 2.00, O qubits = 1.00, d = 3.00, K = 3.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = 1.00, d = 3.00, K = 3.00
cluster 3: original input = 1.00, rho qubits = 1.00, O qubits = 1.00, d = 2.00, K = 2.00
objective value: 243.23369667540246
manually calculated objective value: 243.0
runtime: 0.037290096282958984
OPTIMAL
********************
saturated fc shots = 1024
2 cases to run: dict_keys([(2, 5), (3, 6)])
----------------------------------------------------------------------------------------------------
(3, 7)
----------------------------------------------------------------------------------------------------
Case (3, 7)
Generating 1x7, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
solving for 4 clusters
solving for 5 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 2.00, O qubits = 0.00, d = 3.00, K = 2.00
cluster 2: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
objective value: 42.1453694937144
manually calculated objective value: 42.0
runtime: 0.011071920394897461
OPTIMAL
********************
saturated fc shots = 1024
3 cases to run: dict_keys([(2, 5), (3, 6), (3, 7)])
----------------------------------------------------------------------------------------------------
(3, 8)
----------------------------------------------------------------------------------------------------
Case (3, 8)
Generating 2x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
Infeasible
solving for 5 clusters
********************
MIQCP stats:
7 cuts, 5 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 2.00, d = 3.00, K = 2.00
cluster 1: original input = 1.00, rho qubits = 2.00, O qubits = 1.00, d = 3.00, K = 3.00
cluster 2: original input = 2.00, rho qubits = 1.00, O qubits = 3.00, d = 3.00, K = 4.00
cluster 3: original input = 1.00, rho qubits = 2.00, O qubits = 1.00, d = 3.00, K = 3.00
cluster 4: original input = 1.00, rho qubits = 2.00, O qubits = 0.00, d = 3.00, K = 2.00
objective value: 423.8090871140152
manually calculated objective value: 423.0
runtime: 0.12429499626159668
OPTIMAL
********************
saturated fc shots = 2048
4 cases to run: dict_keys([(2, 5), (3, 6), (3, 7), (3, 8)])
----------------------------------------------------------------------------------------------------
(3, 9)
----------------------------------------------------------------------------------------------------
Case (3, 9)
Generating 3x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
Infeasible
solving for 5 clusters
Infeasible
Case (3, 9) not feasible
----------------------------------------------------------------------------------------------------
(3, 10)
----------------------------------------------------------------------------------------------------
Case (3, 10)
Generating 2x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
Infeasible
solving for 5 clusters
Infeasible
Case (3, 10) not feasible
----------------------------------------------------------------------------------------------------
(4, 5)
Case existed, skip
(4, 6)
Case existed, skip
(4, 7)
Case existed, skip
(4, 8)
Case existed, skip
(4, 9)
----------------------------------------------------------------------------------------------------
Case (4, 9)
Generating 3x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
solving for 5 clusters
********************
MIQCP stats:
6 cuts, 4 clusters, max qubit = 4
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 1.00, rho qubits = 3.00, O qubits = 0.00, d = 4.00, K = 3.00
cluster 2: original input = 4.00, rho qubits = 0.00, O qubits = 3.00, d = 4.00, K = 3.00
cluster 3: original input = 1.00, rho qubits = 2.00, O qubits = 1.00, d = 3.00, K = 3.00
objective value: 405.27880986558773
manually calculated objective value: 405.0
runtime: 0.1354827880859375
OPTIMAL
********************
saturated fc shots = 4096
5 cases to run: dict_keys([(2, 5), (3, 6), (3, 7), (3, 8), (4, 9)])
----------------------------------------------------------------------------------------------------
(4, 10)
----------------------------------------------------------------------------------------------------
Case (4, 10)
Generating 2x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
solving for 4 clusters
solving for 5 clusters
********************
MIQCP stats:
6 cuts, 4 clusters, max qubit = 4
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 2.00, rho qubits = 2.00, O qubits = 1.00, d = 4.00, K = 3.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 3.00, d = 4.00, K = 4.00
cluster 3: original input = 2.00, rho qubits = 2.00, O qubits = 0.00, d = 4.00, K = 2.00
objective value: 360.73614843624193
manually calculated objective value: 360.0
runtime: 0.17361092567443848
OPTIMAL
********************
saturated fc shots = 7168
6 cases to run: dict_keys([(2, 5), (3, 6), (3, 7), (3, 8), (4, 9), (4, 10)])
----------------------------------------------------------------------------------------------------
(4, 12)
fc = 12, skip
(4, 14)
fc = 14, skip
(5, 6)
Case existed, skip
(5, 7)
Case existed, skip
(5, 8)
Case existed, skip
(5, 9)
Case existed, skip
(5, 10)
Case existed, skip
(5, 12)
fc = 12, skip
(5, 14)
fc = 14, skip
(5, 16)
fc = 16, skip
(5, 18)
fc = 18, skip
(5, 20)
fc = 20, skip
(6, 7)
Case existed, skip
(6, 8)
Case existed, skip
(6, 9)
Case existed, skip
(6, 10)
Case existed, skip
(6, 12)
Case existed, skip
(6, 14)
Case existed, skip
(6, 16)
fc = 16, skip
(6, 18)
fc = 18, skip
(6, 20)
fc = 20, skip
(7, 8)
Case existed, skip
(7, 9)
Case existed, skip
(7, 10)
Case existed, skip
(7, 12)
Case existed, skip
(7, 14)
Case existed, skip
(7, 16)
fc = 16, skip
(7, 18)
fc = 18, skip
(7, 20)
fc = 20, skip
(8, 9)
Case existed, skip
(8, 10)
Case existed, skip
(8, 12)
Case existed, skip
(8, 14)
Case existed, skip
(8, 16)
Case existed, skip
(8, 18)
fc = 18, skip
(8, 20)
fc = 20, skip
(9, 10)
Case existed, skip
(9, 12)
Case existed, skip
(9, 14)
Case existed, skip
(9, 16)
Case existed, skip
(9, 18)
fc = 18, skip
(9, 20)
fc = 20, skip
All cases to run: dict_keys([(2, 5), (3, 6), (3, 7), (3, 8), (4, 9), (4, 10)])
Running case (2, 5)
evaluate fc starts here
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc qasm + noise, 1024 shots
2.377e-01 seconds
evaluate fc ends here
Dump evaluator_input with 33 cases
**************************************************
Running case (3, 6)
evaluate fc starts here
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc qasm + noise, 1024 shots
3.789e-01 seconds
evaluate fc ends here
Dump evaluator_input with 34 cases
**************************************************
Running case (3, 7)
evaluate fc starts here
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc qasm + noise, 1024 shots
2.855e-01 seconds
evaluate fc ends here
Dump evaluator_input with 35 cases
**************************************************
Running case (3, 8)
evaluate fc starts here
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc qasm + noise, 2048 shots
3.744e-01 seconds
evaluate fc ends here
Dump evaluator_input with 36 cases
**************************************************
Running case (4, 9)
evaluate fc starts here
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc qasm + noise, 4096 shots
1.205e+00 seconds
evaluate fc ends here
Dump evaluator_input with 37 cases
**************************************************
Running case (4, 10)
evaluate fc starts here
Evaluating fc state vector
Evaluating fc qasm, 7168 shots
Evaluating fc qasm + noise, 7168 shots
1.239e+00 seconds
evaluate fc ends here
Dump evaluator_input with 38 cases
**************************************************
----------------------------------------------------------------------------------------------------
