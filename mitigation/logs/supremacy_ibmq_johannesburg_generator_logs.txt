-------------------------------------------------- Generator ibmq_johannesburg supremacy --------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (2, 3)
Generating 1x3, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
Infeasible
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 2
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 1.00, O qubits = 0.00, d = 2.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.011265039443969727
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
1 cases to run: dict_keys([(2, 3)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 4)
Generating 2x2, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.014307022094726562
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
2 cases to run: dict_keys([(2, 3), (3, 4)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 5)
Generating 1x5, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.017396211624145508
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
3 cases to run: dict_keys([(2, 3), (3, 4), (3, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 6)
Generating 2x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (3, 6) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 5)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289154
manually calculated objective value: 8.999999999999979
runtime: 0.02087998390197754
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
4 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 2.00, d = 4.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 2.00, O qubits = 0.00, d = 4.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.03199911117553711
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
5 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 7)
Generating 1x7, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.014246940612792969
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
6 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 8)
Generating 2x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 4
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 2.00, rho qubits = 2.00, O qubits = 1.00, d = 4.00, K = 3.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.12338685989379883
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
7 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 9)
Generating 3x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (4, 9) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.04614400863647461
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
8 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
objective value: 9.03006560328916
manually calculated objective value: 9.0
runtime: 0.02438497543334961
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
9 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 8)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 3.00, rho qubits = 2.00, O qubits = 1.00, d = 5.00, K = 3.00
cluster 2: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.13905787467956543
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
10 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 9)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 2.00, O qubits = 1.00, d = 5.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 3.00, d = 5.00, K = 4.00
cluster 2: original input = 2.00, rho qubits = 2.00, O qubits = 1.00, d = 4.00, K = 3.00
objective value: 378.653499176593
manually calculated objective value: 377.99999999999994
runtime: 0.25247693061828613
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
11 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 10)
Generating 2x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 2.00, d = 4.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 2.00, O qubits = 2.00, d = 5.00, K = 4.00
cluster 2: original input = 3.00, rho qubits = 2.00, O qubits = 0.00, d = 5.00, K = 2.00
objective value: 370.1588825849221
manually calculated objective value: 369.0
runtime: 0.2382199764251709
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
12 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 12)
Generating 3x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (5, 12) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.024843931198120117
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
13 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.0653829574584961
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
14 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
3 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 2.00, d = 6.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 1.00, d = 6.00, K = 3.00
objective value: 162.0989827463447
manually calculated objective value: 162.0
runtime: 0.06034111976623535
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
15 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.047573089599609375
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
16 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 2: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
objective value: 975.0098839425
manually calculated objective value: 972.0000000000006
runtime: 0.4131479263305664
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
17 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 14)
Generating 2x7, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 361.1268451500688
manually calculated objective value: 360.0
runtime: 0.3261260986328125
OPTIMAL
********************
current diff: 0.24482991309927174 current shots: 50176
saturated fc shots = 98304, needs 1 jobs
18 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12353562477174
manually calculated objective value: 35.999984780367726
runtime: 0.12532305717468262
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
19 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
3 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 2.00, d = 5.00, K = 3.00
cluster 1: original input = 5.00, rho qubits = 2.00, O qubits = 1.00, d = 7.00, K = 3.00
objective value: 162.0989827463447
manually calculated objective value: 162.0
runtime: 0.1616809368133545
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
20 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.15236306190490723
OPTIMAL
********************
saturated fc shots = 9216, needs 1 jobs
21 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 4.00, rho qubits = 3.00, O qubits = 1.00, d = 7.00, K = 4.00
cluster 1: original input = 7.00, rho qubits = 0.00, O qubits = 4.00, d = 7.00, K = 4.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = 0.00, d = 3.00, K = 2.00
objective value: 767.3489573469615
manually calculated objective value: 765.0
runtime: 0.3528099060058594
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
22 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 14)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 2.00, O qubits = 1.00, d = 7.00, K = 3.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.33970189094543457
OPTIMAL
********************
current diff: 0.25160452083446555 current shots: 50176
current diff: 0.10098630818022222 current shots: 101376
saturated fc shots = 102400, needs 1 jobs
23 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 16)
Generating 4x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (7, 16) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 18)
Generating 3x6, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (7, 18) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 6.00, rho qubits = 2.00, O qubits = -0.00, d = 8.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = -0.00, O qubits = 2.00, d = 3.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.10489320755004883
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
24 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.10027790069580078
OPTIMAL
********************
saturated fc shots = 7168, needs 1 jobs
25 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 2.00, d = 5.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 3.00, O qubits = 1.00, d = 8.00, K = 4.00
objective value: 758.0193921129979
manually calculated objective value: 756.0
runtime: 0.41268205642700195
OPTIMAL
********************
saturated fc shots = 25600, needs 1 jobs
26 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 2.00, d = 8.00, K = 2.00
cluster 1: original input = 6.00, rho qubits = 2.00, O qubits = 0.00, d = 8.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.08472800254821777
OPTIMAL
********************
current diff: 0.2422156855305473 current shots: 50176
saturated fc shots = 96256, needs 1 jobs
27 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
7 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 4.00, rho qubits = 3.00, O qubits = 1.00, d = 7.00, K = 4.00
cluster 1: original input = 6.00, rho qubits = 2.00, O qubits = 3.00, d = 8.00, K = 5.00
cluster 2: original input = 6.00, rho qubits = 2.00, O qubits = 3.00, d = 8.00, K = 5.00
objective value: 2600.926387534849
manually calculated objective value: 2592.0
runtime: 0.5177879333496094
OPTIMAL
********************
current diff: 0.787926865368109 current shots: 50176
current diff: 0.3768674230938491 current shots: 101376
current diff: 0.2314002931215658 current shots: 152576
current diff: 0.16172645544152667 current shots: 203776
current diff: 0.12252070528868178 current shots: 254976
saturated fc shots = 297984, needs 1 jobs
28 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (8, 18) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 20)
Generating 4x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (8, 20) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12353478477772
manually calculated objective value: 35.99998392108484
runtime: 0.14683079719543457
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
29 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 8.00, rho qubits = 1.00, O qubits = 2.00, d = 9.00, K = 3.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = -0.00, d = 3.00, K = 2.00
objective value: 144.1816320059937
manually calculated objective value: 143.99999999999997
runtime: 0.3921821117401123
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
30 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.06112098693847656
OPTIMAL
********************
current diff: 0.24111223283019803 current shots: 50176
saturated fc shots = 96256, needs 1 jobs
31 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 2.00, O qubits = 2.00, d = 5.00, K = 4.00
cluster 1: original input = 5.00, rho qubits = 3.00, O qubits = 1.00, d = 8.00, K = 4.00
cluster 2: original input = 8.00, rho qubits = 1.00, O qubits = 3.00, d = 9.00, K = 4.00
objective value: 1137.478220444401
manually calculated objective value: 1133.9999999999993
runtime: 0.4223160743713379
OPTIMAL
********************
current diff: 0.7933685713816772 current shots: 50176
current diff: 0.3820891682793997 current shots: 101376
current diff: 0.23534604058036981 current shots: 152576
current diff: 0.1622309625756226 current shots: 203776
current diff: 0.12239310836587511 current shots: 254976
saturated fc shots = 301056, needs 1 jobs
32 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14), (9, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 7.00, rho qubits = 1.00, O qubits = 4.00, d = 8.00, K = 5.00
cluster 1: original input = 6.00, rho qubits = 3.00, O qubits = -0.00, d = 9.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 2.00, O qubits = 2.00, d = 7.00, K = 4.00
objective value: 1028.8962650648882
manually calculated objective value: 1026.0000000000002
runtime: 0.5914218425750732
OPTIMAL
********************
current diff: 1.912531342974508 current shots: 50176
current diff: 1.3899206744182768 current shots: 101376
current diff: 1.0642612762283832 current shots: 152576
current diff: 0.8431890666144286 current shots: 203776
current diff: 0.6847715786215266 current shots: 254976
current diff: 0.5688835589968536 current shots: 306176
current diff: 0.4816761796848815 current shots: 357376
current diff: 0.41342387818618703 current shots: 408576
current diff: 0.3586830832843672 current shots: 459776
current diff: 0.3152080662269298 current shots: 510976
current diff: 0.27898747258982876 current shots: 562176
current diff: 0.24897770395965357 current shots: 613376
current diff: 0.2237077460433918 current shots: 664576
current diff: 0.20244989939388305 current shots: 715776
current diff: 0.18394717572599703 current shots: 766976
current diff: 0.1675867950823197 current shots: 818176
current diff: 0.1533379508253508 current shots: 869376
current diff: 0.1409033767837163 current shots: 920576
current diff: 0.13039045533850147 current shots: 971776
current diff: 0.12099119871245732 current shots: 1022976
current diff: 0.11261104641770102 current shots: 1074176
current diff: 0.1052487593972901 current shots: 1125376
saturated fc shots = 1165312, needs 1 jobs
33 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14), (9, 16), (9, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 20)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (9, 20) not feasible
----------------------------------------------------------------------------------------------------
case (2, 3) needs 1 fc jobs
case (3, 4) needs 1 fc jobs
case (3, 5) needs 1 fc jobs
case (4, 5) needs 1 fc jobs
case (4, 6) needs 1 fc jobs
case (4, 7) needs 1 fc jobs
case (4, 8) needs 1 fc jobs
case (5, 6) needs 1 fc jobs
case (5, 7) needs 1 fc jobs
case (5, 8) needs 1 fc jobs
case (5, 9) needs 1 fc jobs
case (5, 10) needs 1 fc jobs
case (6, 7) needs 1 fc jobs
case (6, 8) needs 1 fc jobs
case (6, 9) needs 1 fc jobs
case (6, 10) needs 1 fc jobs
case (6, 12) needs 1 fc jobs
case (6, 14) needs 1 fc jobs
case (7, 8) needs 1 fc jobs
case (7, 9) needs 1 fc jobs
case (7, 10) needs 1 fc jobs
case (7, 12) needs 1 fc jobs
case (7, 14) needs 1 fc jobs
case (8, 9) needs 1 fc jobs
case (8, 10) needs 1 fc jobs
case (8, 12) needs 1 fc jobs
case (8, 14) needs 1 fc jobs
case (8, 16) needs 1 fc jobs
case (9, 10) needs 1 fc jobs
case (9, 12) needs 1 fc jobs
case (9, 14) needs 1 fc jobs
case (9, 16) needs 1 fc jobs
case (9, 18) needs 1 fc jobs
----------------------------------------------------------------------------------------------------
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.07749795913696289
Calculating measurement filter, 20-qubit calibration circuits * 8 * 8.192e+03 shots.
job object turnaround time = 0.46416282653808594
Submitting case (2, 3) has job ids ['5dd7c0380bf24b0018b7354f']
Meas_filter job id 5dd7c0388aa7e00018b8f473
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3407468795776367
Calculating measurement filter, 20-qubit calibration circuits * 16 * 8.192e+03 shots.
job object turnaround time = 0.5509371757507324
Submitting case (3, 4) has job ids ['5dd7c03bd4872d00185a580a']
Meas_filter job id 5dd7c03b8aa7e00018b8f474
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.14470148086547852
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots.
job object turnaround time = 0.8089230060577393
Submitting case (3, 5) has job ids ['5dd7c03dc02fc60018634c50']
Meas_filter job id 5dd7c03ef5613200186ad230
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.15100646018981934
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots.
job object turnaround time = 1.0153889656066895
Submitting case (4, 5) has job ids ['5dd7c040f5613200186ad232']
Meas_filter job id 5dd7c041af2f73001805d7bf
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.445711612701416
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.6656782627105713
Submitting case (4, 6) has job ids ['5dd7c044af2f73001805d7c0']
Meas_filter job id 5dd7c04533f85e00194c0172
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.1985001564025879
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.9478797912597656
Submitting case (4, 7) has job ids ['5dd7c047c02fc60018634c52']
Meas_filter job id 5dd7c04aaf2f73001805d7c2
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots, submission history:
Submitted 1 * 3072 = 3072 shots to hardware
job object turnaround time = 0.5387911796569824
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.357296705245972
Submitting case (4, 8) has job ids ['5dd7c04dc02fc60018634c55']
Meas_filter job id 5dd7c0530bf24b0018b73555
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.46602344512939453
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.411320686340332
Submitting case (5, 6) has job ids ['5dd7c056af2f73001805d7c4']
Meas_filter job id 5dd7c057af2f73001805d7c5
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.1502552032470703
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 3.052558183670044
Submitting case (5, 7) has job ids ['5dd7c0598aa7e00018b8f479']
Meas_filter job id 5dd7c05dc02fc60018634c57
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.5661218166351318
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.421503305435181
Submitting case (5, 8) has job ids ['5dd7c05f0bf24b0018b73557']
Meas_filter job id 5dd7c0668aa7e00018b8f47d
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.525050163269043
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.089842319488525
Submitting case (5, 9) has job ids ['5dd7c06833f85e00194c0177']
Meas_filter job id 5dd7c07533f85e00194c017a
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.5170316696166992
Submitting case (5, 10) has job ids ['5dd7c0788aa7e00018b8f481']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.17284917831420898
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.9262959957122803
Submitting case (6, 7) has job ids ['5dd7c07ba903af00180afc77']
Meas_filter job id 5dd7c07ef5613200186ad237
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots, submission history:
Submitted 1 * 3072 = 3072 shots to hardware
job object turnaround time = 0.5554506778717041
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.328744411468506
Submitting case (6, 8) has job ids ['5dd7c080af2f73001805d7c8']
Meas_filter job id 5dd7c0860bf24b0018b7355a
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.5370543003082275
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.410898685455322
Submitting case (6, 9) has job ids ['5dd7c0892efcfc00184eb0e5']
Meas_filter job id 5dd7c09733f85e00194c017e
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.5627553462982178
Submitting case (6, 10) has job ids ['5dd7c09ac02fc60018634c61']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots, submission history:
Submitted 3 * 8192 = 24576 shots to hardware
job object turnaround time = 0.8029470443725586
Submitting case (6, 12) has job ids ['5dd7c09df5613200186ad238']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 98304 shots
Evaluating fc hardware, 98304 shots, submission history:
Submitted 12 * 8192 = 98304 shots to hardware
job object turnaround time = 1.9282095432281494
Submitting case (6, 14) has job ids ['5dd7c0a3d4872d00185a5817']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.46823930740356445
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.400925159454346
Submitting case (7, 8) has job ids ['5dd7c0a6d4872d00185a5818']
Meas_filter job id 5dd7c0ac2efcfc00184eb0e9
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.5110199451446533
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.058905601501465
Submitting case (7, 9) has job ids ['5dd7c0aff5613200186ad239']
Meas_filter job id 5dd7c0bcfa67c10018ceb565
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 9216 shots
Evaluating fc hardware, 9216 shots, submission history:
Submitted 2 * 4608 = 9216 shots to hardware
job object turnaround time = 0.6055159568786621
Submitting case (7, 10) has job ids ['5dd7c0bffa67c10018ceb567']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots, submission history:
Submitted 3 * 8192 = 24576 shots to hardware
job object turnaround time = 0.8369057178497314
Submitting case (7, 12) has job ids ['5dd7c0c32efcfc00184eb0ea']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 102400 shots
Evaluating fc hardware, 102400 shots, submission history:
Submitted 16 * 6400 = 102400 shots to hardware
job object turnaround time = 2.291055679321289
Submitting case (7, 14) has job ids ['5dd7c0dbf5613200186ad23f']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.48761439323425293
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.02797245979309
Submitting case (8, 9) has job ids ['5dd7c0de2efcfc00184eb0ec']
Meas_filter job id 5dd7c0ebc02fc60018634c68
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 7168 shots
Evaluating fc hardware, 7168 shots, submission history:
Submitted 1 * 7168 = 7168 shots to hardware
job object turnaround time = 0.516016960144043
Submitting case (8, 10) has job ids ['5dd7c0eed4872d00185a5821']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 25600 shots
Evaluating fc hardware, 25600 shots, submission history:
Submitted 4 * 6400 = 25600 shots to hardware
job object turnaround time = 1.1725735664367676
Submitting case (8, 12) has job ids ['5dd7c0f20bf24b0018b73562']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 96256 shots
Evaluating fc hardware, 96256 shots, submission history:
Submitted 16 * 6016 = 96256 shots to hardware
job object turnaround time = 2.3641488552093506
Submitting case (8, 14) has job ids ['5dd7c0f8c02fc60018634c6a']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 297984 shots
Evaluating fc hardware, 297984 shots, submission history:
Submitted 48 * 6208 = 297984 shots to hardware
job object turnaround time = 6.524613618850708
Submitting case (8, 16) has job ids ['5dd7c1088aa7e00018b8f48f']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.7059164047241211
Submitting case (9, 10) has job ids ['5dd7c10bfa67c10018ceb56d']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots, submission history:
Submitted 3 * 8192 = 24576 shots to hardware
job object turnaround time = 0.8380661010742188
Submitting case (9, 12) has job ids ['5dd7c10ed4872d00185a5825']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 96256 shots
Evaluating fc hardware, 96256 shots, submission history:
Submitted 16 * 6016 = 96256 shots to hardware
job object turnaround time = 2.11375093460083
Submitting case (9, 14) has job ids ['5dd7c1148aa7e00018b8f490']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 301056 shots
Evaluating fc hardware, 301056 shots, submission history:
Submitted 42 * 7168 = 301056 shots to hardware
job object turnaround time = 5.99789834022522
Submitting case (9, 16) has job ids ['5dd7c1242efcfc00184eb0ef']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1165312 shots
Evaluating fc hardware, 1165312 shots, submission history:
Submitted 256 * 4552 = 1165312 shots to hardware
job object turnaround time = 42.1951379776001
Submitting case (9, 18) has job ids ['5dd7c16ef5613200186ad241']
**************************************************
Submitted 33 cases to hw
----------------------------------------------------------------------------------------------------
Retrieving case (2, 3)
Meas filter job id 5dd7c0388aa7e00018b8f473
job_id : 5dd7c0380bf24b0018b7354f
Mitigation for 3 qubit circuit
Mitigation for 3 qubit circuit took 1.747e-02 seconds
Execute on hardware took 3.338e+03 seconds
Dump evaluator_input with 1 cases
Retrieving case (3, 4)
Meas filter job id 5dd7c03b8aa7e00018b8f474
job_id : 5dd7c03bd4872d00185a580a
Mitigation for 4 qubit circuit
Mitigation for 4 qubit circuit took 2.470e-02 seconds
Execute on hardware took 5.156e+02 seconds
Dump evaluator_input with 2 cases
Retrieving case (3, 5)
Meas filter job id 5dd7c03ef5613200186ad230
job_id : 5dd7c03dc02fc60018634c50
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.380e-02 seconds
Execute on hardware took 3.814e+02 seconds
Dump evaluator_input with 3 cases
Retrieving case (4, 5)
Meas filter job id 5dd7c041af2f73001805d7bf
job_id : 5dd7c040f5613200186ad232
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.835e-02 seconds
Execute on hardware took 6.137e+02 seconds
Dump evaluator_input with 4 cases
Retrieving case (4, 6)
Meas filter job id 5dd7c04533f85e00194c0172
job_id : 5dd7c044af2f73001805d7c0
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 9.880e-02 seconds
Execute on hardware took 7.228e+02 seconds
Dump evaluator_input with 5 cases
Retrieving case (4, 7)
Meas filter job id 5dd7c04aaf2f73001805d7c2
job_id : 5dd7c047c02fc60018634c52
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.555e-01 seconds
Execute on hardware took 1.394e+03 seconds
Dump evaluator_input with 6 cases
Retrieving case (4, 8)
Meas filter job id 5dd7c0530bf24b0018b73555
job_id : 5dd7c04dc02fc60018634c55
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 1.927e+00 seconds
Execute on hardware took 3.106e+03 seconds
Dump evaluator_input with 7 cases
Retrieving case (5, 6)
Meas filter job id 5dd7c057af2f73001805d7c5
job_id : 5dd7c056af2f73001805d7c4
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 9.404e-02 seconds
Execute on hardware took 1.447e+00 seconds
Dump evaluator_input with 8 cases
Retrieving case (5, 7)
Meas filter job id 5dd7c05dc02fc60018634c57
job_id : 5dd7c0598aa7e00018b8f479
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.795e-01 seconds
Execute on hardware took 1.359e+03 seconds
Dump evaluator_input with 9 cases
Retrieving case (5, 8)
Meas filter job id 5dd7c0668aa7e00018b8f47d
job_id : 5dd7c05f0bf24b0018b73557
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 1.963e+00 seconds
Execute on hardware took 2.505e+03 seconds
Dump evaluator_input with 10 cases
Retrieving case (5, 9)
Meas filter job id 5dd7c07533f85e00194c017a
job_id : 5dd7c06833f85e00194c0177
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 7.631e+00 seconds
Execute on hardware took 6.529e+03 seconds
Dump evaluator_input with 11 cases
Retrieving case (5, 10)
job_id : 5dd7c0788aa7e00018b8f481
Execute on hardware took 6.697e-01 seconds
Dump evaluator_input with 12 cases
Retrieving case (6, 7)
Meas filter job id 5dd7c07ef5613200186ad237
job_id : 5dd7c07ba903af00180afc77
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.740e-01 seconds
Execute on hardware took 2.061e+00 seconds
Dump evaluator_input with 13 cases
Retrieving case (6, 8)
Meas filter job id 5dd7c0860bf24b0018b7355a
job_id : 5dd7c080af2f73001805d7c8
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.077e+00 seconds
Execute on hardware took 2.356e+03 seconds
Dump evaluator_input with 14 cases
Retrieving case (6, 9)
Meas filter job id 5dd7c09733f85e00194c017e
job_id : 5dd7c0892efcfc00184eb0e5
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 7.946e+00 seconds
Execute on hardware took 4.634e+03 seconds
Dump evaluator_input with 15 cases
Retrieving case (6, 10)
job_id : 5dd7c09ac02fc60018634c61
Execute on hardware took 7.028e-01 seconds
Dump evaluator_input with 16 cases
Retrieving case (6, 12)
job_id : 5dd7c09df5613200186ad238
Execute on hardware took 8.628e-01 seconds
Dump evaluator_input with 17 cases
Retrieving case (6, 14)
job_id : 5dd7c0a3d4872d00185a5817
Execute on hardware took 1.736e+02 seconds
Dump evaluator_input with 18 cases
Retrieving case (7, 8)
Meas filter job id 5dd7c0ac2efcfc00184eb0e9
job_id : 5dd7c0a6d4872d00185a5818
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 1.997e+00 seconds
Execute on hardware took 2.542e+03 seconds
Dump evaluator_input with 19 cases
Retrieving case (7, 9)
Meas filter job id 5dd7c0bcfa67c10018ceb565
job_id : 5dd7c0aff5613200186ad239
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 7.576e+00 seconds
Execute on hardware took 4.595e+03 seconds
Dump evaluator_input with 20 cases
Retrieving case (7, 10)
job_id : 5dd7c0bffa67c10018ceb567
Execute on hardware took 6.749e-01 seconds
Dump evaluator_input with 21 cases
Retrieving case (7, 12)
job_id : 5dd7c0c32efcfc00184eb0ea
Execute on hardware took 1.461e+02 seconds
Dump evaluator_input with 22 cases
Retrieving case (7, 14)
job_id : 5dd7c0dbf5613200186ad23f
Execute on hardware took 2.037e+02 seconds
Dump evaluator_input with 23 cases
Retrieving case (8, 9)
Meas filter job id 5dd7c0ebc02fc60018634c68
job_id : 5dd7c0de2efcfc00184eb0ec
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 6.498e+00 seconds
Execute on hardware took 4.870e+03 seconds
Dump evaluator_input with 24 cases
Retrieving case (8, 10)
job_id : 5dd7c0eed4872d00185a5821
Execute on hardware took 6.302e-01 seconds
Dump evaluator_input with 25 cases
Retrieving case (8, 12)
job_id : 5dd7c0f20bf24b0018b73562
Execute on hardware took 1.045e+00 seconds
Dump evaluator_input with 26 cases
Retrieving case (8, 14)
job_id : 5dd7c0f8c02fc60018634c6a
Execute on hardware took 1.819e+02 seconds
Dump evaluator_input with 27 cases
Retrieving case (8, 16)
job_id : 5dd7c1088aa7e00018b8f48f
Execute on hardware took 6.563e+02 seconds
Dump evaluator_input with 28 cases
Retrieving case (9, 10)
job_id : 5dd7c10bfa67c10018ceb56d
Execute on hardware took 7.289e-01 seconds
Dump evaluator_input with 29 cases
Retrieving case (9, 12)
job_id : 5dd7c10ed4872d00185a5825
Execute on hardware took 9.311e-01 seconds
Dump evaluator_input with 30 cases
Retrieving case (9, 14)
job_id : 5dd7c1148aa7e00018b8f490
Execute on hardware took 1.861e+02 seconds
Dump evaluator_input with 31 cases
Retrieving case (9, 16)
job_id : 5dd7c1242efcfc00184eb0ef
Execute on hardware took 4.229e+02 seconds
Dump evaluator_input with 32 cases
Retrieving case (9, 18)
job_id : 5dd7c16ef5613200186ad241
Execute on hardware took 1.428e+03 seconds
Dump evaluator_input with 33 cases
----------------------------------------------------------------------------------------------------
