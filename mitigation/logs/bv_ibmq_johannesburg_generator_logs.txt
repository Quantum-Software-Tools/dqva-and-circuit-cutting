-------------------------------------------------- Generator ibmq_johannesburg bv --------------------------------------------------
Existing cases: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8)])
----------------------------------------------------------------------------------------------------
Case (4, 9)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 27.091840854573732
manually calculated objective value: 27.000000000000075
runtime: 0.17944884300231934
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
1 cases to run: dict_keys([(4, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 6)
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.06753206253051758
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
2 cases to run: dict_keys([(4, 9), (5, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 7)
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.056939125061035156
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
3 cases to run: dict_keys([(4, 9), (5, 6), (5, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 8)
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.06327104568481445
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
4 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.06280112266540527
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
5 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 10)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
cluster 2: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.14886784553527832
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
6 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 12)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.24125003814697266
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
7 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.04549098014831543
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
8 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0770719051361084
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
9 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.03006560328918
manually calculated objective value: 9.000000000000004
runtime: 0.1177971363067627
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
10 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.08506989479064941
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
11 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.2873549461364746
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
12 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 14)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 27.091840854573626
manually calculated objective value: 26.999999999999968
runtime: 0.21126389503479004
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
13 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0447239875793457
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
14 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.26233696937561035
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
15 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 7.00, rho qubits = 0.00, O qubits = 1.00, d = 7.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.08227205276489258
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
16 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.06867504119873047
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
17 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 14)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
cluster 2: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.3617269992828369
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
18 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 16)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.2460460662841797
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
19 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 18)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 7.00, rho qubits = 0.00, O qubits = 1.00, d = 7.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
cluster 2: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
objective value: 27.091840854573334
manually calculated objective value: 26.999999999999687
runtime: 0.5588970184326172
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
20 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.1245720386505127
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
21 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.11945295333862305
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
22 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0847158432006836
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
23 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0939640998840332
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
24 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
cluster 2: original input = 7.00, rho qubits = 1.00, O qubits = 1.00, d = 8.00, K = 2.00
objective value: 27.091840854572865
manually calculated objective value: 26.9999999999992
runtime: 0.3477199077606201
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
25 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
cluster 2: original input = 7.00, rho qubits = 1.00, O qubits = 1.00, d = 8.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.34542012214660645
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
26 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 20)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 1.00, d = 8.00, K = 2.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 27.091840854573658
manually calculated objective value: 27.000000000000004
runtime: 0.6106841564178467
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
27 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 0.00, d = 8.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0947418212890625
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
28 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.10942888259887695
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
29 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 9.00, rho qubits = 0.00, O qubits = 1.00, d = 9.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0963599681854248
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
30 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 16)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 9.00, rho qubits = 0.00, O qubits = 1.00, d = 9.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 0.00, d = 8.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.14926815032958984
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
31 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14), (9, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 0.00, d = 8.00, K = 1.00
cluster 2: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.44991278648376465
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
32 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14), (9, 16), (9, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 20)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 9.00, rho qubits = 0.00, O qubits = 1.00, d = 9.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 27.09184085457361
manually calculated objective value: 26.999999999999957
runtime: 0.5470199584960938
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
33 cases to run: dict_keys([(4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14), (9, 16), (9, 18), (9, 20)])
----------------------------------------------------------------------------------------------------
case (4, 9) needs 1 fc jobs
case (5, 6) needs 1 fc jobs
case (5, 7) needs 1 fc jobs
case (5, 8) needs 1 fc jobs
case (5, 9) needs 1 fc jobs
case (5, 10) needs 1 fc jobs
case (5, 12) needs 1 fc jobs
case (6, 7) needs 1 fc jobs
case (6, 8) needs 1 fc jobs
case (6, 9) needs 1 fc jobs
case (6, 10) needs 1 fc jobs
case (6, 12) needs 1 fc jobs
case (6, 14) needs 1 fc jobs
case (7, 8) needs 1 fc jobs
case (7, 9) needs 1 fc jobs
case (7, 10) needs 1 fc jobs
case (7, 12) needs 1 fc jobs
case (7, 14) needs 1 fc jobs
case (7, 16) needs 1 fc jobs
case (7, 18) needs 1 fc jobs
case (8, 9) needs 1 fc jobs
case (8, 10) needs 1 fc jobs
case (8, 12) needs 1 fc jobs
case (8, 14) needs 1 fc jobs
case (8, 16) needs 1 fc jobs
case (8, 18) needs 1 fc jobs
case (8, 20) needs 1 fc jobs
case (9, 10) needs 1 fc jobs
case (9, 12) needs 1 fc jobs
case (9, 14) needs 1 fc jobs
case (9, 16) needs 1 fc jobs
case (9, 18) needs 1 fc jobs
case (9, 20) needs 1 fc jobs
----------------------------------------------------------------------------------------------------
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.19309163093566895
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 7.5627601146698
Submitting case (4, 9) has job ids ['5ddaaaecaf2f73001805e121']
Meas_filter job id 5ddaaaf4a903af00180b0592
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.1738901138305664
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.135648250579834
Submitting case (5, 6) has job ids ['5ddaaaf6af2f73001805e122']
Meas_filter job id 5ddaaaf797300300184d4b30
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.20431852340698242
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 1.979130506515503
Submitting case (5, 7) has job ids ['5ddaaaf97218c40018b612e5']
Meas_filter job id 5ddaaafbd4872d00185a6157
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.23409509658813477
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 4.3052122592926025
Submitting case (5, 8) has job ids ['5ddaaafd8aa7e00018b8fd68']
Meas_filter job id 5ddaab01af2f73001805e125
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.37309885025024414
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 7.621605396270752
Submitting case (5, 9) has job ids ['5ddaab032efcfc00184eba16']
Meas_filter job id 5ddaab0bf5613200186adb5b
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.29010677337646484
Submitting case (5, 10) has job ids ['5ddaab0dd4872d00185a615d']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.35223937034606934
Submitting case (5, 12) has job ids ['5ddaab0f8aa7e00018b8fd6a']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.19445157051086426
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 1.9886126518249512
Submitting case (6, 7) has job ids ['5ddaab11f5613200186adb5c']
Meas_filter job id 5ddaab138aa7e00018b8fd6b
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.23743796348571777
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 3.936370849609375
Submitting case (6, 8) has job ids ['5ddaab158aa7e00018b8fd6c']
Meas_filter job id 5ddaab19fa67c10018cebe79
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2651660442352295
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 7.996664524078369
Submitting case (6, 9) has job ids ['5ddaab1b7218c40018b612e7']
Meas_filter job id 5ddaab23f5613200186adb61
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.29060888290405273
Submitting case (6, 10) has job ids ['5ddaab257218c40018b612eb']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.3534128665924072
Submitting case (6, 12) has job ids ['5ddaab28a903af00180b0598']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.4210488796234131
Submitting case (6, 14) has job ids ['5ddaab2b7b80db001831674f']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.23844003677368164
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 3.7563493251800537
Submitting case (7, 8) has job ids ['5ddaab2dd4872d00185a6163']
Meas_filter job id 5ddaab30a903af00180b059a
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.26593542098999023
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 7.672915697097778
Submitting case (7, 9) has job ids ['5ddaab32a903af00180b059b']
Meas_filter job id 5ddaab3aa903af00180b059d
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.4708821773529053
Submitting case (7, 10) has job ids ['5ddaab3c7b80db0018316752']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.35725903511047363
Submitting case (7, 12) has job ids ['5ddaab3f8aa7e00018b8fd6f']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.43047523498535156
Submitting case (7, 14) has job ids ['5ddaab4197300300184d4b3e']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.37380385398864746
Submitting case (7, 16) has job ids ['5ddaab467b80db0018316753']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.4228792190551758
Submitting case (7, 18) has job ids ['5ddaab4ff5613200186adb64']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2661318778991699
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
