-------------------------------------------------- Generator ibmq_boeblingen hwea --------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (2, 3)
solving for 2 clusters
solving for 3 clusters
Infeasible
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 2
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 1.00, O qubits = 0.00, d = 2.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.012309074401855469
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
1 cases to run: dict_keys([(2, 3)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 4)
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.012544870376586914
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
2 cases to run: dict_keys([(2, 3), (3, 4)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 5)
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.011035919189453125
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
3 cases to run: dict_keys([(2, 3), (3, 4), (3, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 6)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 3
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
cluster 2: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.03277897834777832
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
4 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 5)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289154
manually calculated objective value: 8.999999999999979
runtime: 0.015320062637329102
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
5 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.013758182525634766
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
6 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 7)
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.014140844345092773
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
7 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 8)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 1.00, O qubits = 1.00, d = 2.00, K = 2.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 27.091840854573718
manually calculated objective value: 27.00000000000006
runtime: 0.09094405174255371
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
8 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 9)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 27.091840854573732
manually calculated objective value: 27.000000000000075
runtime: 0.11084699630737305
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
9 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.016628026962280273
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
10 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.025131940841674805
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
11 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.02463698387145996
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
12 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.02125096321105957
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
13 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 10)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
cluster 2: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.13989901542663574
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
14 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 12)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 2: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.12962007522583008
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
15 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.02214193344116211
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
16 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.025854825973510742
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
17 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.03006560328918
manually calculated objective value: 9.000000000000004
runtime: 0.032242774963378906
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
18 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.029481887817382812
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
19 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.14931297302246094
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
20 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 14)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 27.091840854573626
manually calculated objective value: 26.999999999999968
runtime: 0.19493412971496582
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
21 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.024765968322753906
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
22 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.027616024017333984
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
23 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 7.00, rho qubits = 0.00, O qubits = 1.00, d = 7.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0378568172454834
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
24 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.03353619575500488
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
25 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 14)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
cluster 2: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.2512328624725342
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
26 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 16)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 5.00, rho qubits = 0.00, O qubits = 1.00, d = 5.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.19056391716003418
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
27 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 18)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 7.00, rho qubits = 0.00, O qubits = 1.00, d = 7.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
cluster 2: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
objective value: 27.091840854573334
manually calculated objective value: 26.999999999999687
runtime: 0.2238938808441162
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
28 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.03353404998779297
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
29 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.036206960678100586
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
30 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0317840576171875
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
31 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.050132036209106445
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
32 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
cluster 2: original input = 7.00, rho qubits = 1.00, O qubits = 1.00, d = 8.00, K = 2.00
objective value: 27.091840854572865
manually calculated objective value: 26.9999999999992
runtime: 0.28431010246276855
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
33 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
cluster 2: original input = 7.00, rho qubits = 1.00, O qubits = 1.00, d = 8.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.264862060546875
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
34 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 20)
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 1.00, d = 8.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 1.00, d = 8.00, K = 2.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 27.091840854573658
manually calculated objective value: 27.000000000000004
runtime: 0.342587947845459
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
35 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 0.00, d = 8.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0346980094909668
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
36 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 6.00, rho qubits = 0.00, O qubits = 1.00, d = 6.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.036134958267211914
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
37 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 9.00, rho qubits = 0.00, O qubits = 1.00, d = 9.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.055136919021606445
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
38 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 16)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 9.00, rho qubits = 0.00, O qubits = 1.00, d = 9.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 0.00, d = 8.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.0465540885925293
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
39 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14), (9, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 7.00, rho qubits = 1.00, O qubits = 0.00, d = 8.00, K = 1.00
cluster 2: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
objective value: 27.091840854573658
manually calculated objective value: 27.0
runtime: 0.32647109031677246
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
40 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14), (9, 16), (9, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 20)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 9.00, rho qubits = 0.00, O qubits = 1.00, d = 9.00, K = 1.00
cluster 1: original input = 6.00, rho qubits = 1.00, O qubits = 0.00, d = 7.00, K = 1.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 27.09184085457361
manually calculated objective value: 26.999999999999957
runtime: 0.3408498764038086
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
41 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (7, 16), (7, 18), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (8, 18), (8, 20), (9, 10), (9, 12), (9, 14), (9, 16), (9, 18), (9, 20)])
----------------------------------------------------------------------------------------------------
case (2, 3) needs 1 fc jobs
case (3, 4) needs 1 fc jobs
case (3, 5) needs 1 fc jobs
case (3, 6) needs 1 fc jobs
case (4, 5) needs 1 fc jobs
case (4, 6) needs 1 fc jobs
case (4, 7) needs 1 fc jobs
case (4, 8) needs 1 fc jobs
case (4, 9) needs 1 fc jobs
case (5, 6) needs 1 fc jobs
case (5, 7) needs 1 fc jobs
case (5, 8) needs 1 fc jobs
case (5, 9) needs 1 fc jobs
case (5, 10) needs 1 fc jobs
case (5, 12) needs 1 fc jobs
case (6, 7) needs 1 fc jobs
case (6, 8) needs 1 fc jobs
case (6, 9) needs 1 fc jobs
case (6, 10) needs 1 fc jobs
case (6, 12) needs 1 fc jobs
case (6, 14) needs 1 fc jobs
case (7, 8) needs 1 fc jobs
case (7, 9) needs 1 fc jobs
case (7, 10) needs 1 fc jobs
case (7, 12) needs 1 fc jobs
case (7, 14) needs 1 fc jobs
case (7, 16) needs 1 fc jobs
case (7, 18) needs 1 fc jobs
case (8, 9) needs 1 fc jobs
case (8, 10) needs 1 fc jobs
case (8, 12) needs 1 fc jobs
case (8, 14) needs 1 fc jobs
case (8, 16) needs 1 fc jobs
case (8, 18) needs 1 fc jobs
case (8, 20) needs 1 fc jobs
case (9, 10) needs 1 fc jobs
case (9, 12) needs 1 fc jobs
case (9, 14) needs 1 fc jobs
case (9, 16) needs 1 fc jobs
case (9, 18) needs 1 fc jobs
case (9, 20) needs 1 fc jobs
----------------------------------------------------------------------------------------------------
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.16027593612670898
Calculating measurement filter, 20-qubit calibration circuits * 8 * 8.192e+03 shots.
job object turnaround time = 0.42064619064331055
Submitting case (2, 3) has job ids ['5dd7b8abd4872d00185a57ea']
Meas_filter job id 5dd7b8abf5613200186ad210
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.13759255409240723
Calculating measurement filter, 20-qubit calibration circuits * 16 * 8.192e+03 shots.
job object turnaround time = 0.4414374828338623
Submitting case (3, 4) has job ids ['5dd7b8adc02fc60018634c36']
Meas_filter job id 5dd7b8aed4872d00185a57eb
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.23890066146850586
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots.
job object turnaround time = 0.7780168056488037
Submitting case (3, 5) has job ids ['5dd7b8b0f5613200186ad212']
Meas_filter job id 5dd7b8b1d4872d00185a57ec
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2536327838897705
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.7501020431518555
Submitting case (3, 6) has job ids ['5dd7b8b38aa7e00018b8f451']
Meas_filter job id 5dd7b8b5fa67c10018ceb533
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.21952199935913086
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots.
job object turnaround time = 0.7511918544769287
Submitting case (4, 5) has job ids ['5dd7b8b72efcfc00184eb0bd']
Meas_filter job id 5dd7b8b8d4872d00185a57ed
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2548232078552246
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.413926124572754
Submitting case (4, 6) has job ids ['5dd7b8bafa67c10018ceb535']
Meas_filter job id 5dd7b8bbaf2f73001805d7a5
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.37450361251831055
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.801921844482422
Submitting case (4, 7) has job ids ['5dd7b8be8aa7e00018b8f452']
Meas_filter job id 5dd7b8c0af2f73001805d7a6
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.38492512702941895
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.051785707473755
Submitting case (4, 8) has job ids ['5dd7b8c30bf24b0018b73536']
Meas_filter job id 5dd7b8c9f5613200186ad213
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.42820119857788086
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 12.705037593841553
Submitting case (4, 9) has job ids ['5dd7b8ccf5613200186ad214']
Meas_filter job id 5dd7b8d88aa7e00018b8f454
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2721576690673828
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.382070779800415
Submitting case (5, 6) has job ids ['5dd7b8dbd4872d00185a57f0']
Meas_filter job id 5dd7b8dcf5613200186ad215
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.25066351890563965
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 3.0561623573303223
Submitting case (5, 7) has job ids ['5dd7b8dfd4872d00185a57f1']
Meas_filter job id 5dd7b8e18aa7e00018b8f455
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3284010887145996
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.1233460903167725
Submitting case (5, 8) has job ids ['5dd7b8e4a903af00180afc5b']
Meas_filter job id 5dd7b8eac02fc60018634c37
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.31204771995544434
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.046772003173828
Submitting case (5, 9) has job ids ['5dd7b8eda903af00180afc5c']
Meas_filter job id 5dd7b8fa2efcfc00184eb0c1
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.38449883460998535
Submitting case (5, 10) has job ids ['5dd7b8fdf5613200186ad218']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3591737747192383
Submitting case (5, 12) has job ids ['5dd7b8ff8aa7e00018b8f458']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.24680233001708984
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.863424777984619
Submitting case (6, 7) has job ids ['5dd7b902c02fc60018634c39']
Meas_filter job id 5dd7b90433f85e00194c0159
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.5303406715393066
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.132905006408691
Submitting case (6, 8) has job ids ['5dd7b907fa67c10018ceb53a']
Meas_filter job id 5dd7b90d8aa7e00018b8f45a
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3099184036254883
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.010577201843262
Submitting case (6, 9) has job ids ['5dd7b90f2efcfc00184eb0c3']
Meas_filter job id 5dd7b91ca903af00180afc5e
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.4008476734161377
Submitting case (6, 10) has job ids ['5dd7b91f0bf24b0018b7353b']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.38400959968566895
Submitting case (6, 12) has job ids ['5dd7b922c02fc60018634c3c']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.6470494270324707
Submitting case (6, 14) has job ids ['5dd7b9262efcfc00184eb0c4']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2650880813598633
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 5.949395418167114
Submitting case (7, 8) has job ids ['5dd7b928c02fc60018634c3d']
Meas_filter job id 5dd7b92ef5613200186ad219
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3355369567871094
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 13.128463983535767
Submitting case (7, 9) has job ids ['5dd7b9300bf24b0018b7353e']
Meas_filter job id 5dd7b93e8aa7e00018b8f45c
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3079359531402588
Submitting case (7, 10) has job ids ['5dd7b9402efcfc00184eb0c5']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.378798246383667
Submitting case (7, 12) has job ids ['5dd7b943af2f73001805d7a9']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.41219019889831543
Submitting case (7, 14) has job ids ['5dd7b9462efcfc00184eb0c6']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.4465212821960449
Submitting case (7, 16) has job ids ['5dd7b94bd4872d00185a57f4']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.5459580421447754
Submitting case (7, 18) has job ids ['5dd7b9590bf24b0018b73540']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.2830371856689453
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 12.694077253341675
Submitting case (8, 9) has job ids ['5dd7b95b33f85e00194c015e']
Meas_filter job id 5dd7b968c02fc60018634c41
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.35734009742736816
Submitting case (8, 10) has job ids ['5dd7b96bd4872d00185a57f5']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.37482500076293945
Submitting case (8, 12) has job ids ['5dd7b96dfa67c10018ceb53e']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.4156310558319092
Submitting case (8, 14) has job ids ['5dd7b971d4872d00185a57f6']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.6485590934753418
Submitting case (8, 16) has job ids ['5dd7b976f5613200186ad21b']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.5287637710571289
Submitting case (8, 18) has job ids ['5dd7b983a903af00180afc61']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.6011276245117188
Submitting case (8, 20) has job ids ['5dd7b9b2f5613200186ad21c']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.35257959365844727
Submitting case (9, 10) has job ids ['5dd7b9b433f85e00194c0160']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3579874038696289
Submitting case (9, 12) has job ids ['5dd7b9b733f85e00194c0161']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.39791297912597656
Submitting case (9, 14) has job ids ['5dd7b9baa903af00180afc62']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.45855283737182617
Submitting case (9, 16) has job ids ['5dd7b9bf33f85e00194c0163']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.5082099437713623
Submitting case (9, 18) has job ids ['5dd7b9ccd4872d00185a57fa']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.6015801429748535
Submitting case (9, 20) has job ids ['5dd7b9fbd4872d00185a57fb']
**************************************************
Submitted 41 cases to hw
----------------------------------------------------------------------------------------------------
Retrieving case (2, 3)
Meas filter job id 5dd7b8abf5613200186ad210
job_id : 5dd7b8abd4872d00185a57ea
Mitigation for 3 qubit circuit
Mitigation for 3 qubit circuit took 1.601e-02 seconds
Execute on hardware took 1.863e+04 seconds
Dump evaluator_input with 1 cases
Retrieving case (3, 4)
Meas filter job id 5dd7b8aed4872d00185a57eb
job_id : 5dd7b8adc02fc60018634c36
Mitigation for 4 qubit circuit
Mitigation for 4 qubit circuit took 2.093e-02 seconds
Execute on hardware took 1.103e+02 seconds
Dump evaluator_input with 2 cases
Retrieving case (3, 5)
Meas filter job id 5dd7b8b1d4872d00185a57ec
job_id : 5dd7b8b0f5613200186ad212
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.379e-02 seconds
Execute on hardware took 1.780e+02 seconds
Dump evaluator_input with 3 cases
Retrieving case (3, 6)
Meas filter job id 5dd7b8b5fa67c10018ceb533
job_id : 5dd7b8b38aa7e00018b8f451
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 1.058e-01 seconds
Execute on hardware took 3.150e+02 seconds
Dump evaluator_input with 4 cases
Retrieving case (4, 5)
Meas filter job id 5dd7b8b8d4872d00185a57ed
job_id : 5dd7b8b72efcfc00184eb0bd
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.737e-02 seconds
Execute on hardware took 1.780e+02 seconds
Dump evaluator_input with 5 cases
Retrieving case (4, 6)
Meas filter job id 5dd7b8bbaf2f73001805d7a5
job_id : 5dd7b8bafa67c10018ceb535
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 1.054e-01 seconds
Execute on hardware took 3.140e+02 seconds
Dump evaluator_input with 6 cases
Retrieving case (4, 7)
Meas filter job id 5dd7b8c0af2f73001805d7a6
job_id : 5dd7b8be8aa7e00018b8f452
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 6.136e-01 seconds
Execute on hardware took 6.003e+02 seconds
Dump evaluator_input with 7 cases
Retrieving case (4, 8)
Meas filter job id 5dd7b8c9f5613200186ad213
job_id : 5dd7b8c30bf24b0018b73536
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.122e+00 seconds
Execute on hardware took 1.139e+03 seconds
Dump evaluator_input with 8 cases
Retrieving case (4, 9)
Meas filter job id 5dd7b8d88aa7e00018b8f454
job_id : 5dd7b8ccf5613200186ad214
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.165e+01 seconds
Execute on hardware took 2.600e+03 seconds
Dump evaluator_input with 9 cases
Retrieving case (5, 6)
Meas filter job id 5dd7b8dcf5613200186ad215
job_id : 5dd7b8dbd4872d00185a57f0
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 1.064e-01 seconds
Execute on hardware took 1.502e+00 seconds
Dump evaluator_input with 10 cases
Retrieving case (5, 7)
Meas filter job id 5dd7b8e18aa7e00018b8f455
job_id : 5dd7b8dfd4872d00185a57f1
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.945e-01 seconds
Execute on hardware took 6.436e+02 seconds
Dump evaluator_input with 11 cases
Retrieving case (5, 8)
Meas filter job id 5dd7b8eac02fc60018634c37
job_id : 5dd7b8e4a903af00180afc5b
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.303e+00 seconds
Execute on hardware took 1.181e+03 seconds
Dump evaluator_input with 12 cases
Retrieving case (5, 9)
Meas filter job id 5dd7b8fa2efcfc00184eb0c1
job_id : 5dd7b8eda903af00180afc5c
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.142e+01 seconds
Execute on hardware took 2.271e+03 seconds
Dump evaluator_input with 13 cases
Retrieving case (5, 10)
job_id : 5dd7b8fdf5613200186ad218
Execute on hardware took 6.752e-01 seconds
Dump evaluator_input with 14 cases
Retrieving case (5, 12)
job_id : 5dd7b8ff8aa7e00018b8f458
Execute on hardware took 7.810e-01 seconds
Dump evaluator_input with 15 cases
Retrieving case (6, 7)
Meas filter job id 5dd7b90433f85e00194c0159
job_id : 5dd7b902c02fc60018634c39
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 6.642e-01 seconds
Execute on hardware took 5.930e+02 seconds
Dump evaluator_input with 16 cases
Retrieving case (6, 8)
Meas filter job id 5dd7b90d8aa7e00018b8f45a
job_id : 5dd7b907fa67c10018ceb53a
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.559e+00 seconds
Execute on hardware took 1.151e+03 seconds
Dump evaluator_input with 17 cases
Retrieving case (6, 9)
Meas filter job id 5dd7b91ca903af00180afc5e
job_id : 5dd7b90f2efcfc00184eb0c3
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.221e+01 seconds
Execute on hardware took 2.371e+03 seconds
Dump evaluator_input with 18 cases
Retrieving case (6, 10)
job_id : 5dd7b91f0bf24b0018b7353b
Execute on hardware took 6.251e-01 seconds
Dump evaluator_input with 19 cases
Retrieving case (6, 12)
job_id : 5dd7b922c02fc60018634c3c
Execute on hardware took 6.582e-01 seconds
Dump evaluator_input with 20 cases
Retrieving case (6, 14)
job_id : 5dd7b9262efcfc00184eb0c4
Execute on hardware took 6.974e-01 seconds
Dump evaluator_input with 21 cases
Retrieving case (7, 8)
Meas filter job id 5dd7b92ef5613200186ad219
job_id : 5dd7b928c02fc60018634c3d
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.303e+00 seconds
Execute on hardware took 1.302e+03 seconds
Dump evaluator_input with 22 cases
Retrieving case (7, 9)
Meas filter job id 5dd7b93e8aa7e00018b8f45c
job_id : 5dd7b9300bf24b0018b7353e
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.176e+01 seconds
Execute on hardware took 2.364e+03 seconds
Dump evaluator_input with 23 cases
Retrieving case (7, 10)
job_id : 5dd7b9402efcfc00184eb0c5
Execute on hardware took 6.850e-01 seconds
Dump evaluator_input with 24 cases
Retrieving case (7, 12)
job_id : 5dd7b943af2f73001805d7a9
Execute on hardware took 6.645e-01 seconds
Dump evaluator_input with 25 cases
Retrieving case (7, 14)
job_id : 5dd7b9462efcfc00184eb0c6
Execute on hardware took 1.017e+02 seconds
Dump evaluator_input with 26 cases
Retrieving case (7, 16)
job_id : 5dd7b94bd4872d00185a57f4
Execute on hardware took 1.339e+01 seconds
Dump evaluator_input with 27 cases
Retrieving case (7, 18)
job_id : 5dd7b9590bf24b0018b73540
Execute on hardware took 1.246e+01 seconds
Dump evaluator_input with 28 cases
Retrieving case (8, 9)
Meas filter job id 5dd7b968c02fc60018634c41
job_id : 5dd7b95b33f85e00194c015e
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.058e+01 seconds
Execute on hardware took 2.273e+03 seconds
Dump evaluator_input with 29 cases
Retrieving case (8, 10)
job_id : 5dd7b96bd4872d00185a57f5
Execute on hardware took 7.097e-01 seconds
Dump evaluator_input with 30 cases
Retrieving case (8, 12)
job_id : 5dd7b96dfa67c10018ceb53e
Execute on hardware took 1.295e+00 seconds
Dump evaluator_input with 31 cases
Retrieving case (8, 14)
job_id : 5dd7b971d4872d00185a57f6
Execute on hardware took 2.413e+02 seconds
Dump evaluator_input with 32 cases
Retrieving case (8, 16)
job_id : 5dd7b976f5613200186ad21b
Execute on hardware took 1.250e+01 seconds
Dump evaluator_input with 33 cases
Retrieving case (8, 18)
job_id : 5dd7b983a903af00180afc61
Execute on hardware took 4.420e+01 seconds
Dump evaluator_input with 34 cases
Retrieving case (8, 20)
job_id : 5dd7b9b2f5613200186ad21c
Execute on hardware took 4.092e+01 seconds
Dump evaluator_input with 35 cases
Retrieving case (9, 10)
job_id : 5dd7b9b433f85e00194c0160
Execute on hardware took 2.960e+01 seconds
Dump evaluator_input with 36 cases
Retrieving case (9, 12)
job_id : 5dd7b9b733f85e00194c0161
Execute on hardware took 3.602e+01 seconds
Dump evaluator_input with 37 cases
Retrieving case (9, 14)
job_id : 5dd7b9baa903af00180afc62
Execute on hardware took 3.685e+01 seconds
Dump evaluator_input with 38 cases
Retrieving case (9, 16)
job_id : 5dd7b9bf33f85e00194c0163
Execute on hardware took 3.508e+01 seconds
Dump evaluator_input with 39 cases
Retrieving case (9, 18)
job_id : 5dd7b9ccd4872d00185a57fa
Execute on hardware took 3.406e+01 seconds
Dump evaluator_input with 40 cases
Retrieving case (9, 20)
job_id : 5dd7b9fbd4872d00185a57fb
Execute on hardware took 3.322e+01 seconds
Dump evaluator_input with 41 cases
----------------------------------------------------------------------------------------------------
