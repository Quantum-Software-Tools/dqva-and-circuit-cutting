-------------------------------------------------- Generator ibmq_poughkeepsie supremacy --------------------------------------------------
Existing cases: dict_keys([(4, 8)])
----------------------------------------------------------------------------------------------------
Case (2, 3)
Generating 1x3, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
Infeasible
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 2
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 1.00, rho qubits = 1.00, O qubits = 0.00, d = 2.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.02997899055480957
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
1 cases to run: dict_keys([(2, 3)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 4)
Generating 2x2, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.014281988143920898
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
2 cases to run: dict_keys([(2, 3), (3, 4)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 5)
Generating 1x5, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 3
cluster 0: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 0.00, d = 3.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.011687994003295898
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
3 cases to run: dict_keys([(2, 3), (3, 4), (3, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (3, 6)
Generating 2x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (3, 6) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 5)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289154
manually calculated objective value: 8.999999999999979
runtime: 0.02299809455871582
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
4 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 2.00, d = 4.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 2.00, O qubits = 0.00, d = 4.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.03893780708312988
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
5 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 7)
Generating 1x7, 1+8+1 supremacy circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 4
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 1.00, d = 4.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 0.00, d = 4.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.015787839889526367
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
6 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (4, 9)
Generating 3x3, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (4, 9) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 6)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.05677390098571777
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
7 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 0.00, d = 5.00, K = 1.00
cluster 1: original input = 3.00, rho qubits = 0.00, O qubits = 1.00, d = 3.00, K = 1.00
objective value: 9.03006560328916
manually calculated objective value: 9.0
runtime: 0.029687166213989258
OPTIMAL
********************
saturated fc shots = 1024, needs 1 jobs
8 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 8)
Generating 2x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 3.00, rho qubits = 2.00, O qubits = 1.00, d = 5.00, K = 3.00
cluster 2: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.16390585899353027
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
9 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 9)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 3.00, rho qubits = 2.00, O qubits = 1.00, d = 5.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 3.00, d = 5.00, K = 4.00
cluster 2: original input = 2.00, rho qubits = 2.00, O qubits = 1.00, d = 4.00, K = 3.00
objective value: 378.653499176593
manually calculated objective value: 377.99999999999994
runtime: 0.22512388229370117
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
10 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 10)
Generating 2x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 5
cluster 0: original input = 4.00, rho qubits = 0.00, O qubits = 2.00, d = 4.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 2.00, O qubits = 2.00, d = 5.00, K = 4.00
cluster 2: original input = 3.00, rho qubits = 2.00, O qubits = 0.00, d = 5.00, K = 2.00
objective value: 370.1588825849221
manually calculated objective value: 369.0
runtime: 0.23572683334350586
OPTIMAL
********************
saturated fc shots = 8192, needs 1 jobs
11 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (5, 12)
Generating 3x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (5, 12) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 7)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
1 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 2.00, rho qubits = 0.00, O qubits = 1.00, d = 2.00, K = 1.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 0.00, d = 6.00, K = 1.00
objective value: 9.030065603289177
manually calculated objective value: 9.0
runtime: 0.03845500946044922
OPTIMAL
********************
saturated fc shots = 2048, needs 1 jobs
12 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 1.00, d = 4.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.06704092025756836
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
13 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
3 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 2.00, d = 6.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 1.00, d = 6.00, K = 3.00
objective value: 162.0989827463447
manually calculated objective value: 162.0
runtime: 0.06434202194213867
OPTIMAL
********************
saturated fc shots = 4096, needs 1 jobs
14 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.0667412281036377
OPTIMAL
********************
saturated fc shots = 9216, needs 1 jobs
15 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 2: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
objective value: 975.0098839425
manually calculated objective value: 972.0000000000006
runtime: 0.4250941276550293
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
16 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (6, 14)
Generating 2x7, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 6
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 4.00, rho qubits = 2.00, O qubits = 2.00, d = 6.00, K = 4.00
cluster 2: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 361.1268451500688
manually calculated objective value: 360.0
runtime: 0.3999960422515869
OPTIMAL
********************
current diff: 0.23613146620388736 current shots: 50176
current diff: 0.10119533558453694 current shots: 101376
saturated fc shots = 102400, needs 1 jobs
17 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 8)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12353562477174
manually calculated objective value: 35.999984780367726
runtime: 0.11966681480407715
OPTIMAL
********************
saturated fc shots = 3072, needs 1 jobs
18 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
3 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 4.00, rho qubits = 1.00, O qubits = 2.00, d = 5.00, K = 3.00
cluster 1: original input = 5.00, rho qubits = 2.00, O qubits = 1.00, d = 7.00, K = 3.00
objective value: 162.0989827463447
manually calculated objective value: 162.0
runtime: 0.15303301811218262
OPTIMAL
********************
saturated fc shots = 5120, needs 1 jobs
19 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 1.00, d = 5.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.1345531940460205
OPTIMAL
********************
saturated fc shots = 9216, needs 1 jobs
20 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 12)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 4.00, rho qubits = 3.00, O qubits = 1.00, d = 7.00, K = 4.00
cluster 1: original input = 7.00, rho qubits = 0.00, O qubits = 4.00, d = 7.00, K = 4.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = 0.00, d = 3.00, K = 2.00
objective value: 767.3489573469615
manually calculated objective value: 765.0
runtime: 0.359713077545166
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
21 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 14)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 7
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 2.00, O qubits = 1.00, d = 7.00, K = 3.00
objective value: 180.16075799762916
manually calculated objective value: 180.0
runtime: 0.3920938968658447
OPTIMAL
********************
current diff: 0.239218057088577 current shots: 50176
current diff: 0.1011310104323725 current shots: 101376
saturated fc shots = 102400, needs 1 jobs
22 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 16)
Generating 4x4, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (7, 16) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (7, 18)
Generating 3x6, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (7, 18) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 9)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 6.00, rho qubits = 2.00, O qubits = -0.00, d = 8.00, K = 2.00
cluster 1: original input = 3.00, rho qubits = -0.00, O qubits = 2.00, d = 3.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.12253713607788086
OPTIMAL
********************
saturated fc shots = 5120, needs 1 jobs
23 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
cluster 1: original input = 5.00, rho qubits = 1.00, O qubits = 1.00, d = 6.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.11444711685180664
OPTIMAL
********************
saturated fc shots = 9216, needs 1 jobs
24 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
5 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 1: original input = 4.00, rho qubits = 1.00, O qubits = 2.00, d = 5.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 3.00, O qubits = 1.00, d = 8.00, K = 4.00
objective value: 758.0193921129979
manually calculated objective value: 756.0
runtime: 0.41685914993286133
OPTIMAL
********************
saturated fc shots = 26624, needs 1 jobs
25 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 8
cluster 0: original input = 8.00, rho qubits = 0.00, O qubits = 2.00, d = 8.00, K = 2.00
cluster 1: original input = 6.00, rho qubits = 2.00, O qubits = 0.00, d = 8.00, K = 2.00
objective value: 45.15558793742226
manually calculated objective value: 45.0
runtime: 0.05561184883117676
OPTIMAL
********************
current diff: 0.24391415022199925 current shots: 50176
current diff: 0.09918968197851677 current shots: 101376
saturated fc shots = 101376, needs 1 jobs
26 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
7 cuts, 3 clusters, max qubit = 8
cluster 0: original input = 4.00, rho qubits = 3.00, O qubits = 1.00, d = 7.00, K = 4.00
cluster 1: original input = 6.00, rho qubits = 2.00, O qubits = 3.00, d = 8.00, K = 5.00
cluster 2: original input = 6.00, rho qubits = 2.00, O qubits = 3.00, d = 8.00, K = 5.00
objective value: 2600.926387534849
manually calculated objective value: 2592.0
runtime: 0.5088260173797607
OPTIMAL
********************
current diff: 1.0519980867365017 current shots: 50176
current diff: 0.49230003672649264 current shots: 101376
current diff: 0.2869007218071498 current shots: 152576
current diff: 0.1897529765657043 current shots: 203776
current diff: 0.1344083566070596 current shots: 254976
current diff: 0.10130668689347802 current shots: 306176
saturated fc shots = 309248, needs 1 jobs
27 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (8, 18) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (8, 20)
Generating 4x5, 1+8+1 supremacy circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (8, 20) not feasible
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 10)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
cluster 1: original input = 2.00, rho qubits = 1.00, O qubits = 1.00, d = 3.00, K = 2.00
objective value: 36.12353478477772
manually calculated objective value: 35.99998392108484
runtime: 0.11296296119689941
OPTIMAL
********************
saturated fc shots = 7168, needs 1 jobs
28 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 12)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
4 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 8.00, rho qubits = 1.00, O qubits = 2.00, d = 9.00, K = 3.00
cluster 1: original input = 3.00, rho qubits = 1.00, O qubits = 2.00, d = 4.00, K = 3.00
cluster 2: original input = 1.00, rho qubits = 2.00, O qubits = -0.00, d = 3.00, K = 2.00
objective value: 144.1816320059937
manually calculated objective value: 143.99999999999997
runtime: 0.3728640079498291
OPTIMAL
********************
saturated fc shots = 24576, needs 1 jobs
29 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 14)
Use existing full circuit
solving for 2 clusters
solving for 3 clusters
********************
MIQCP stats:
2 cuts, 2 clusters, max qubit = 9
cluster 0: original input = 6.00, rho qubits = 1.00, O qubits = 1.00, d = 7.00, K = 2.00
cluster 1: original input = 8.00, rho qubits = 1.00, O qubits = 1.00, d = 9.00, K = 2.00
objective value: 36.12355050256896
manually calculated objective value: 36.0
runtime: 0.06763410568237305
OPTIMAL
********************
current diff: 0.24425351346276458 current shots: 50176
current diff: 0.09927978649769308 current shots: 101376
saturated fc shots = 101376, needs 1 jobs
30 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 16)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 3.00, rho qubits = 2.00, O qubits = 2.00, d = 5.00, K = 4.00
cluster 1: original input = 5.00, rho qubits = 3.00, O qubits = 1.00, d = 8.00, K = 4.00
cluster 2: original input = 8.00, rho qubits = 1.00, O qubits = 3.00, d = 9.00, K = 4.00
objective value: 1137.478220444401
manually calculated objective value: 1133.9999999999993
runtime: 0.4520289897918701
OPTIMAL
********************
current diff: 1.0517579097723833 current shots: 50176
current diff: 0.4912930563072248 current shots: 101376
current diff: 0.2868682762231579 current shots: 152576
current diff: 0.1915176876711313 current shots: 203776
current diff: 0.13452381460930382 current shots: 254976
current diff: 0.10197932960549293 current shots: 306176
saturated fc shots = 310272, needs 1 jobs
31 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14), (9, 16)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 18)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
********************
MIQCP stats:
6 cuts, 3 clusters, max qubit = 9
cluster 0: original input = 7.00, rho qubits = 1.00, O qubits = 4.00, d = 8.00, K = 5.00
cluster 1: original input = 6.00, rho qubits = 3.00, O qubits = -0.00, d = 9.00, K = 3.00
cluster 2: original input = 5.00, rho qubits = 2.00, O qubits = 2.00, d = 7.00, K = 4.00
objective value: 1028.8962650648882
manually calculated objective value: 1026.0000000000002
runtime: 0.5406250953674316
OPTIMAL
********************
current diff: 1.7858959767677818 current shots: 50176
current diff: 1.2577608622376892 current shots: 101376
current diff: 0.9436803150989405 current shots: 152576
current diff: 0.747316537470962 current shots: 203776
current diff: 0.6106916699287394 current shots: 254976
current diff: 0.5107998816389964 current shots: 306176
current diff: 0.4378351516322743 current shots: 357376
current diff: 0.3798152677853719 current shots: 408576
current diff: 0.33339060985391555 current shots: 459776
current diff: 0.29538259539884143 current shots: 510976
current diff: 0.26431919346570937 current shots: 562176
current diff: 0.23767722770905103 current shots: 613376
current diff: 0.2153041211194163 current shots: 664576
current diff: 0.1962758274419523 current shots: 715776
current diff: 0.17994008466856845 current shots: 766976
current diff: 0.16580749959021143 current shots: 818176
current diff: 0.15314469052574484 current shots: 869376
current diff: 0.1421526550773681 current shots: 920576
current diff: 0.13240800474528358 current shots: 971776
current diff: 0.12390834608263399 current shots: 1022976
current diff: 0.11638884159562088 current shots: 1074176
current diff: 0.10894461601231686 current shots: 1125376
current diff: 0.10246606205567164 current shots: 1176576
saturated fc shots = 1199104, needs 1 jobs
32 cases to run: dict_keys([(2, 3), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (7, 8), (7, 9), (7, 10), (7, 12), (7, 14), (8, 9), (8, 10), (8, 12), (8, 14), (8, 16), (9, 10), (9, 12), (9, 14), (9, 16), (9, 18)])
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Case (9, 20)
Use existing full circuit
solving for 2 clusters
Infeasible
solving for 3 clusters
Infeasible
Case (9, 20) not feasible
----------------------------------------------------------------------------------------------------
case (2, 3) needs 1 fc jobs
case (3, 4) needs 1 fc jobs
case (3, 5) needs 1 fc jobs
case (4, 5) needs 1 fc jobs
case (4, 6) needs 1 fc jobs
case (4, 7) needs 1 fc jobs
case (5, 6) needs 1 fc jobs
case (5, 7) needs 1 fc jobs
case (5, 8) needs 1 fc jobs
case (5, 9) needs 1 fc jobs
case (5, 10) needs 1 fc jobs
case (6, 7) needs 1 fc jobs
case (6, 8) needs 1 fc jobs
case (6, 9) needs 1 fc jobs
case (6, 10) needs 1 fc jobs
case (6, 12) needs 1 fc jobs
case (6, 14) needs 1 fc jobs
case (7, 8) needs 1 fc jobs
case (7, 9) needs 1 fc jobs
case (7, 10) needs 1 fc jobs
case (7, 12) needs 1 fc jobs
case (7, 14) needs 1 fc jobs
case (8, 9) needs 1 fc jobs
case (8, 10) needs 1 fc jobs
case (8, 12) needs 1 fc jobs
case (8, 14) needs 1 fc jobs
case (8, 16) needs 1 fc jobs
case (9, 10) needs 1 fc jobs
case (9, 12) needs 1 fc jobs
case (9, 14) needs 1 fc jobs
case (9, 16) needs 1 fc jobs
case (9, 18) needs 1 fc jobs
----------------------------------------------------------------------------------------------------
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.20030808448791504
Calculating measurement filter, 20-qubit calibration circuits * 8 * 8.192e+03 shots.
job object turnaround time = 0.3410022258758545
Submitting case (2, 3) has job ids ['5dd7c0248aa7e00018b8f46d']
Meas_filter job id 5dd7c0248aa7e00018b8f46e
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.4121277332305908
Calculating measurement filter, 20-qubit calibration circuits * 16 * 8.192e+03 shots.
job object turnaround time = 0.5982484817504883
Submitting case (3, 4) has job ids ['5dd7c027d4872d00185a5806']
Meas_filter job id 5dd7c027d4872d00185a5807
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.3038206100463867
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots.
job object turnaround time = 0.7816629409790039
Submitting case (3, 5) has job ids ['5dd7c02ac02fc60018634c4e']
Meas_filter job id 5dd7c02b8aa7e00018b8f470
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.40888118743896484
Calculating measurement filter, 20-qubit calibration circuits * 32 * 8.192e+03 shots.
job object turnaround time = 0.8145043849945068
Submitting case (4, 5) has job ids ['5dd7c02df5613200186ad22c']
Meas_filter job id 5dd7c02ea903af00180afc71
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.5374472141265869
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.5559206008911133
Submitting case (4, 6) has job ids ['5dd7c03133f85e00194c016d']
Meas_filter job id 5dd7c032af2f73001805d7bc
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.39911675453186035
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.9302003383636475
Submitting case (4, 7) has job ids ['5dd7c034af2f73001805d7bd']
Meas_filter job id 5dd7c037fa67c10018ceb54d
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.4008524417877197
Calculating measurement filter, 20-qubit calibration circuits * 64 * 8.192e+03 shots.
job object turnaround time = 1.5525922775268555
Submitting case (5, 6) has job ids ['5dd7c03afa67c10018ceb54e']
Meas_filter job id 5dd7c03b33f85e00194c016f
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1024 shots
Evaluating fc hardware, 1024 shots, submission history:
Submitted 1 * 1024 = 1024 shots to hardware
job object turnaround time = 0.402693510055542
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.9583020210266113
Submitting case (5, 7) has job ids ['5dd7c03ec02fc60018634c51']
Meas_filter job id 5dd7c041fa67c10018ceb551
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.6105489730834961
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 5.828254699707031
Submitting case (5, 8) has job ids ['5dd7c044d4872d00185a580d']
Meas_filter job id 5dd7c049af2f73001805d7c1
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.811725378036499
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 12.75432825088501
Submitting case (5, 9) has job ids ['5dd7c04c33f85e00194c0173']
Meas_filter job id 5dd7c05933f85e00194c0174
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 8192 shots
Evaluating fc hardware, 8192 shots, submission history:
Submitted 1 * 8192 = 8192 shots to hardware
job object turnaround time = 0.6727008819580078
Submitting case (5, 10) has job ids ['5dd7c05cfa67c10018ceb558']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 2048 shots
Evaluating fc hardware, 2048 shots, submission history:
Submitted 1 * 2048 = 2048 shots to hardware
job object turnaround time = 0.4544980525970459
Calculating measurement filter, 20-qubit calibration circuits * 128 * 8.192e+03 shots.
job object turnaround time = 2.857210159301758
Submitting case (6, 7) has job ids ['5dd7c05faf2f73001805d7c6']
Meas_filter job id 5dd7c062c02fc60018634c59
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots, submission history:
Submitted 1 * 3072 = 3072 shots to hardware
job object turnaround time = 0.6358489990234375
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.086881399154663
Submitting case (6, 8) has job ids ['5dd7c0642efcfc00184eb0e0']
Meas_filter job id 5dd7c06a2efcfc00184eb0e1
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 4096 shots
Evaluating fc hardware, 4096 shots, submission history:
Submitted 1 * 4096 = 4096 shots to hardware
job object turnaround time = 0.6649715900421143
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 12.603759527206421
Submitting case (6, 9) has job ids ['5dd7c06dc02fc60018634c5a']
Meas_filter job id 5dd7c07ad4872d00185a5812
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 9216 shots
Evaluating fc hardware, 9216 shots, submission history:
Submitted 2 * 4608 = 9216 shots to hardware
job object turnaround time = 0.843848466873169
Submitting case (6, 10) has job ids ['5dd7c07dfa67c10018ceb55f']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots, submission history:
Submitted 3 * 8192 = 24576 shots to hardware
job object turnaround time = 1.0206842422485352
Submitting case (6, 12) has job ids ['5dd7c081d4872d00185a5814']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 102400 shots
Evaluating fc hardware, 102400 shots, submission history:
Submitted 16 * 6400 = 102400 shots to hardware
job object turnaround time = 2.973480224609375
Submitting case (6, 14) has job ids ['5dd7c088c02fc60018634c5d']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 3072 shots
Evaluating fc hardware, 3072 shots, submission history:
Submitted 1 * 3072 = 3072 shots to hardware
job object turnaround time = 0.5827252864837646
Calculating measurement filter, 20-qubit calibration circuits * 256 * 8.192e+03 shots.
job object turnaround time = 6.15461277961731
Submitting case (7, 8) has job ids ['5dd7c08b33f85e00194c017c']
Meas_filter job id 5dd7c091a903af00180afc7b
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 5120 shots
Evaluating fc hardware, 5120 shots, submission history:
Submitted 1 * 5120 = 5120 shots to hardware
job object turnaround time = 0.613940954208374
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 12.499687433242798
Submitting case (7, 9) has job ids ['5dd7c095c02fc60018634c60']
Meas_filter job id 5dd7c0a18aa7e00018b8f485
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 9216 shots
Evaluating fc hardware, 9216 shots, submission history:
Submitted 2 * 4608 = 9216 shots to hardware
job object turnaround time = 0.8629939556121826
Submitting case (7, 10) has job ids ['5dd7c0a4a903af00180afc7d']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots, submission history:
Submitted 3 * 8192 = 24576 shots to hardware
job object turnaround time = 1.2060432434082031
Submitting case (7, 12) has job ids ['5dd7c0a82efcfc00184eb0e8']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 102400 shots
Evaluating fc hardware, 102400 shots, submission history:
Submitted 16 * 6400 = 102400 shots to hardware
job object turnaround time = 3.142648220062256
Submitting case (7, 14) has job ids ['5dd7c0b00bf24b0018b7355d']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 5120 shots
Evaluating fc hardware, 5120 shots, submission history:
Submitted 1 * 5120 = 5120 shots to hardware
job object turnaround time = 0.634408712387085
Calculating measurement filter, 20-qubit calibration circuits * 512 * 8.192e+03 shots.
job object turnaround time = 12.9534592628479
Submitting case (8, 9) has job ids ['5dd7c0b28aa7e00018b8f487']
Meas_filter job id 5dd7c0bfc02fc60018634c66
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 9216 shots
Evaluating fc hardware, 9216 shots, submission history:
Submitted 2 * 4608 = 9216 shots to hardware
job object turnaround time = 0.833045482635498
Submitting case (8, 10) has job ids ['5dd7c0c30bf24b0018b7355f']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 26624 shots
Evaluating fc hardware, 26624 shots, submission history:
Submitted 4 * 6656 = 26624 shots to hardware
job object turnaround time = 1.2155332565307617
Submitting case (8, 12) has job ids ['5dd7c0c7af2f73001805d7d1']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 101376 shots
Evaluating fc hardware, 101376 shots, submission history:
Submitted 16 * 6336 = 101376 shots to hardware
job object turnaround time = 3.198521614074707
Submitting case (8, 14) has job ids ['5dd7c0cef5613200186ad23d']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 309248 shots
Evaluating fc hardware, 309248 shots, submission history:
Submitted 64 * 4832 = 309248 shots to hardware
job object turnaround time = 11.52693247795105
Submitting case (8, 16) has job ids ['5dd7c0e3fa67c10018ceb56a']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 7168 shots
Evaluating fc hardware, 7168 shots, submission history:
Submitted 1 * 7168 = 7168 shots to hardware
job object turnaround time = 0.6561801433563232
Submitting case (9, 10) has job ids ['5dd7c0e6d4872d00185a5820']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 24576 shots
Evaluating fc hardware, 24576 shots, submission history:
Submitted 3 * 8192 = 24576 shots to hardware
job object turnaround time = 1.027508020401001
Submitting case (9, 12) has job ids ['5dd7c0eafa67c10018ceb56b']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 101376 shots
Evaluating fc hardware, 101376 shots, submission history:
Submitted 16 * 6336 = 101376 shots to hardware
job object turnaround time = 3.0033249855041504
Submitting case (9, 14) has job ids ['5dd7c0f1d4872d00185a5822']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 310272 shots
Evaluating fc hardware, 310272 shots, submission history:
Submitted 48 * 6464 = 310272 shots to hardware
job object turnaround time = 8.485483884811401
Submitting case (9, 16) has job ids ['5dd7c104d4872d00185a5824']
**************************************************
Evaluating fc state vector
Evaluating fc qasm, 1199104 shots
Evaluating fc hardware, 1199104 shots, submission history:
Submitted 256 * 4684 = 1199104 shots to hardware
job object turnaround time = 55.11907124519348
Submitting case (9, 18) has job ids ['5dd7c15b0bf24b0018b73563']
**************************************************
Submitted 32 cases to hw
----------------------------------------------------------------------------------------------------
Retrieving case (2, 3)
Meas filter job id 5dd7c0248aa7e00018b8f46e
job_id : 5dd7c0248aa7e00018b8f46d
Mitigation for 3 qubit circuit
Mitigation for 3 qubit circuit took 1.676e-02 seconds
Execute on hardware took 1.626e+00 seconds
Dump evaluator_input with 2 cases
Retrieving case (3, 4)
Meas filter job id 5dd7c027d4872d00185a5807
job_id : 5dd7c027d4872d00185a5806
Mitigation for 4 qubit circuit
Mitigation for 4 qubit circuit took 2.428e-02 seconds
Execute on hardware took 5.193e+01 seconds
Dump evaluator_input with 3 cases
Retrieving case (3, 5)
Meas filter job id 5dd7c02b8aa7e00018b8f470
job_id : 5dd7c02ac02fc60018634c4e
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.397e-02 seconds
Execute on hardware took 3.256e+02 seconds
Dump evaluator_input with 4 cases
Retrieving case (4, 5)
Meas filter job id 5dd7c02ea903af00180afc71
job_id : 5dd7c02df5613200186ad22c
Mitigation for 5 qubit circuit
Mitigation for 5 qubit circuit took 4.500e-02 seconds
Execute on hardware took 3.239e+02 seconds
Dump evaluator_input with 5 cases
Retrieving case (4, 6)
Meas filter job id 5dd7c032af2f73001805d7bc
job_id : 5dd7c03133f85e00194c016d
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 9.594e-02 seconds
Execute on hardware took 5.952e+02 seconds
Dump evaluator_input with 6 cases
Retrieving case (4, 7)
Meas filter job id 5dd7c037fa67c10018ceb54d
job_id : 5dd7c034af2f73001805d7bd
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.407e-01 seconds
Execute on hardware took 1.136e+03 seconds
Dump evaluator_input with 7 cases
Retrieving case (5, 6)
Meas filter job id 5dd7c03b33f85e00194c016f
job_id : 5dd7c03afa67c10018ceb54e
Mitigation for 6 qubit circuit
Mitigation for 6 qubit circuit took 9.773e-02 seconds
Execute on hardware took 5.915e+02 seconds
Dump evaluator_input with 8 cases
Retrieving case (5, 7)
Meas filter job id 5dd7c041fa67c10018ceb551
job_id : 5dd7c03ec02fc60018634c51
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 5.070e-01 seconds
Execute on hardware took 1.128e+03 seconds
Dump evaluator_input with 9 cases
Retrieving case (5, 8)
Meas filter job id 5dd7c049af2f73001805d7c1
job_id : 5dd7c044d4872d00185a580d
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.249e+00 seconds
Execute on hardware took 2.290e+03 seconds
Dump evaluator_input with 10 cases
Retrieving case (5, 9)
Meas filter job id 5dd7c05933f85e00194c0174
job_id : 5dd7c04c33f85e00194c0173
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.161e+01 seconds
Execute on hardware took 4.437e+03 seconds
Dump evaluator_input with 11 cases
Retrieving case (5, 10)
job_id : 5dd7c05cfa67c10018ceb558
Execute on hardware took 7.394e-01 seconds
Dump evaluator_input with 12 cases
Retrieving case (6, 7)
Meas filter job id 5dd7c062c02fc60018634c59
job_id : 5dd7c05faf2f73001805d7c6
Mitigation for 7 qubit circuit
Mitigation for 7 qubit circuit took 6.077e-01 seconds
Execute on hardware took 3.079e+03 seconds
Dump evaluator_input with 13 cases
Retrieving case (6, 8)
Meas filter job id 5dd7c06a2efcfc00184eb0e1
job_id : 5dd7c0642efcfc00184eb0e0
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.440e+00 seconds
Execute on hardware took 2.271e+03 seconds
Dump evaluator_input with 14 cases
Retrieving case (6, 9)
Meas filter job id 5dd7c07ad4872d00185a5812
job_id : 5dd7c06dc02fc60018634c5a
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.103e+01 seconds
Execute on hardware took 4.448e+03 seconds
Dump evaluator_input with 15 cases
Retrieving case (6, 10)
job_id : 5dd7c07dfa67c10018ceb55f
Execute on hardware took 7.409e-01 seconds
Dump evaluator_input with 16 cases
Retrieving case (6, 12)
job_id : 5dd7c081d4872d00185a5814
Execute on hardware took 1.008e+00 seconds
Dump evaluator_input with 17 cases
Retrieving case (6, 14)
job_id : 5dd7c088c02fc60018634c5d
Execute on hardware took 2.025e+02 seconds
Dump evaluator_input with 18 cases
Retrieving case (7, 8)
Meas filter job id 5dd7c091a903af00180afc7b
job_id : 5dd7c08b33f85e00194c017c
Mitigation for 8 qubit circuit
Mitigation for 8 qubit circuit took 2.621e+00 seconds
Execute on hardware took 2.293e+03 seconds
Dump evaluator_input with 19 cases
Retrieving case (7, 9)
Meas filter job id 5dd7c0a18aa7e00018b8f485
job_id : 5dd7c095c02fc60018634c60
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.087e+01 seconds
Execute on hardware took 4.512e+03 seconds
Dump evaluator_input with 20 cases
Retrieving case (7, 10)
job_id : 5dd7c0a4a903af00180afc7d
Execute on hardware took 7.913e-01 seconds
Dump evaluator_input with 21 cases
Retrieving case (7, 12)
job_id : 5dd7c0a82efcfc00184eb0e8
Execute on hardware took 9.145e-01 seconds
Dump evaluator_input with 22 cases
Retrieving case (7, 14)
job_id : 5dd7c0b00bf24b0018b7355d
Execute on hardware took 2.333e+02 seconds
Dump evaluator_input with 23 cases
Retrieving case (8, 9)
Meas filter job id 5dd7c0bfc02fc60018634c66
job_id : 5dd7c0b28aa7e00018b8f487
Mitigation for 9 qubit circuit
Mitigation for 9 qubit circuit took 1.080e+01 seconds
Execute on hardware took 4.376e+03 seconds
Dump evaluator_input with 24 cases
Retrieving case (8, 10)
job_id : 5dd7c0c30bf24b0018b7355f
Execute on hardware took 8.111e-01 seconds
Dump evaluator_input with 25 cases
Retrieving case (8, 12)
job_id : 5dd7c0c7af2f73001805d7d1
Execute on hardware took 1.132e+02 seconds
Dump evaluator_input with 26 cases
Retrieving case (8, 14)
job_id : 5dd7c0cef5613200186ad23d
Execute on hardware took 1.450e+02 seconds
Dump evaluator_input with 27 cases
Retrieving case (8, 16)
job_id : 5dd7c0e3fa67c10018ceb56a
Execute on hardware took 6.316e+02 seconds
Dump evaluator_input with 28 cases
Retrieving case (9, 10)
job_id : 5dd7c0e6d4872d00185a5820
Execute on hardware took 7.196e-01 seconds
Dump evaluator_input with 29 cases
Retrieving case (9, 12)
job_id : 5dd7c0eafa67c10018ceb56b
Execute on hardware took 9.634e-01 seconds
Dump evaluator_input with 30 cases
Retrieving case (9, 14)
job_id : 5dd7c0f1d4872d00185a5822
Execute on hardware took 2.343e+00 seconds
Dump evaluator_input with 31 cases
Retrieving case (9, 16)
job_id : 5dd7c104d4872d00185a5824
Execute on hardware took 3.611e+02 seconds
Dump evaluator_input with 32 cases
Retrieving case (9, 18)
job_id : 5dd7c15b0bf24b0018b73563
Execute on hardware took 1.386e+03 seconds
Dump evaluator_input with 33 cases
----------------------------------------------------------------------------------------------------
